<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>歪鼻子</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.waibizi.com/"/>
  <updated>2021-01-16T13:51:04.699Z</updated>
  <id>https://www.waibizi.com/</id>
  
  <author>
    <name>歪鼻子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈Go的并发安全相关</title>
    <link href="https://www.waibizi.com/2021/01/16/%E8%B0%88%E8%B0%88Go%E7%9A%84%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/"/>
    <id>https://www.waibizi.com/2021/01/16/%E8%B0%88%E8%B0%88Go%E7%9A%84%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E7%9B%B8%E5%85%B3/</id>
    <published>2021-01-16T13:35:09.844Z</published>
    <updated>2021-01-16T13:51:04.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈谈Go的并发安全相关"><a href="#谈谈Go的并发安全相关" class="headerlink" title="谈谈Go的并发安全相关"></a>谈谈Go的并发安全相关</h1><h2 id="1-临界资源"><a href="#1-临界资源" class="headerlink" title="1.临界资源"></a>1.临界资源</h2><p>临界资源：指并发环境当中，多个进程/线程/协程同享的资源</p><p>但是临界资源在并发场景当中如果处理不当，就会导致数据不一致问题</p><h2 id="2-模拟售票超卖"><a href="#2-模拟售票超卖" class="headerlink" title="2.模拟售票超卖"></a>2.模拟售票超卖</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> ticket = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口A"</span>)</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口B"</span>)</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口C"</span>)</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口D"</span>)</span><br><span class="line">time.Sleep(<span class="number">5</span>*time.Second)</span><br><span class="line">fmt.Println(<span class="string">"总共卖出的票数为"</span>,count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saleTickets</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ticket &gt;<span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 模拟售票的处理时间</span></span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">1000</span>))*time.Microsecond)</span><br><span class="line"><span class="comment">// 开始售票</span></span><br><span class="line">ticket--</span><br><span class="line">fmt.Println(name,<span class="string">"售出票,剩余票数为："</span>,ticket)</span><br><span class="line"><span class="comment">// 计算卖出的票总数</span></span><br><span class="line">count++</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"没票了！！！"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/07/rBpUXl_fCsyAWtHeAACn82mJKn8379.png" height="50%" width="50%"></div> <a id="more"></a><h2 id="3-临界资源解决方案"><a href="#3-临界资源解决方案" class="headerlink" title="3.临界资源解决方案"></a>3.临界资源解决方案</h2><p>如同其他编程语言一样，Go语言也提供了锁机制，我们可以通过上锁的方式，某一时间段，只能允许一个gogoutine来访问这个共享数据，当前的goroutine访问完成之后，其他的goroutine才能继续访问</p><p>可以借助sync包下的锁操作，简单看一下demo</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> ticket = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="comment">// 创建锁头</span></span><br><span class="line"><span class="keyword">var</span> mutex sync.Mutex</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口A"</span>)</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口B"</span>)</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口C"</span>)</span><br><span class="line"><span class="keyword">go</span> saleTickets(<span class="string">"售票窗口D"</span>)</span><br><span class="line">time.Sleep(<span class="number">5</span>*time.Second)</span><br><span class="line">fmt.Println(<span class="string">"总共卖出的票数为"</span>,count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saleTickets</span><span class="params">(name <span class="keyword">string</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">mutex.Lock()</span><br><span class="line"><span class="keyword">if</span> ticket &gt;<span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// 模拟售票的处理时间</span></span><br><span class="line">time.Sleep(time.Duration(rand.Intn(<span class="number">1000</span>))*time.Microsecond)</span><br><span class="line"><span class="comment">// 开始售票</span></span><br><span class="line">ticket--</span><br><span class="line">fmt.Println(name,<span class="string">"售出票,剩余票数为："</span>,ticket)</span><br><span class="line"><span class="comment">// 计算卖出的票总数</span></span><br><span class="line">count++</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"没票了！！！"</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">mutex.Unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-channel"><a href="#4-channel" class="headerlink" title="4.channel"></a>4.channel</h2><p>但是！在GoLang当中并不推荐采用上锁的方式保证数据的一致性问题，Go的并发编程当中有一句很经典的话：不要以共享内存的方式去通信，而要以通信的方式去共享内存。</p><p>在Go语言当中并不鼓励用锁保护共享状态的方式在不同的goroutine当中分享信息，而是鼓励通过channel将共享状态或共享状态的变化在各个goroutine之间传递，这样同样能像用锁一样保证在同一时间只有一个goroutine访问共享状态</p><p>那接下来我们就进入channel在并发当中的使用吧</p><p>channel直接翻译过来的意思就是通道，即每个goroutine之间的通道，可以让每个goroutine之间相互通信</p><h3 id="channel的声明"><a href="#channel的声明" class="headerlink" title="channel的声明"></a>channel的声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明通道</span></span><br><span class="line"><span class="keyword">var</span> 通道名 <span class="keyword">chan</span> 数据类型</span><br><span class="line"><span class="comment">// 创建通道，如果通道为nil，就需要先创建通道</span></span><br><span class="line">通道名 = <span class="built_in">make</span>(<span class="keyword">chan</span> 数据类型)</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> myChannel <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">if</span> myChannel == <span class="literal">nil</span> &#123;</span><br><span class="line">      fmt.Println(<span class="string">"channel当前的是nil的，不能使用，需要先创建"</span>)</span><br><span class="line">      myChannel = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">      fmt.Printf(<span class="string">"数据类型为：%T"</span>,myChannel)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="channel的使用"><a href="#channel的使用" class="headerlink" title="channel的使用"></a>channel的使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data := &lt;- myChannel      <span class="comment">//read from channel myChannel</span></span><br><span class="line">myChannel &lt;- data   <span class="comment">//write to channel myChannel</span></span><br></pre></td></tr></table></figure><p>在channel上的箭头方向指定数据是发送还是接收</p><p>另外</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v,ok := &lt;- myChannel <span class="comment">//read value and status from myChannel</span></span><br></pre></td></tr></table></figure><h3 id="channel的了解"><a href="#channel的了解" class="headerlink" title="channel的了解"></a>channel的了解</h3><p>channel的发送与接收数据，默认是阻塞的，当一个数据be send to channel当中时，在发送语句中被阻塞，直到另外一个goroutine从该通道当中读取数据。相对而言，当试图从channel当中读取数据时，读取是阻塞的，直到另外一个goroutine将数据写入该通道。</p><p>示例代码：</p><p>我们都清楚在GoLand当中，如果main的goroutine执行完毕了，那么子的goroutine就算还未执行完毕也会跟着结束，那么采用channel可以让主的goroutine先阻塞，然后等待子的goroutine执行完毕再执行</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">   <span class="keyword">var</span> ch1 <span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">   ch1 = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; <span class="number">10</span>;i++ &#123;</span><br><span class="line">         fmt.Println(<span class="string">"子的goroutine，i:"</span>,i)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 循环结束之后往通道当中写入输入，表示子的goroutine执行完毕了</span></span><br><span class="line">      ch1 &lt;- <span class="literal">true</span></span><br><span class="line">      fmt.Println(<span class="string">"子的goroutine执行完毕"</span>)</span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   data := &lt;-ch1</span><br><span class="line">   fmt.Println(<span class="string">"主的goroutine接收到值"</span>,data)</span><br><span class="line">   fmt.Println(<span class="string">"主的goroutine执行完毕"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈谈Go的并发安全相关&quot;&gt;&lt;a href=&quot;#谈谈Go的并发安全相关&quot; class=&quot;headerlink&quot; title=&quot;谈谈Go的并发安全相关&quot;&gt;&lt;/a&gt;谈谈Go的并发安全相关&lt;/h1&gt;&lt;h2 id=&quot;1-临界资源&quot;&gt;&lt;a href=&quot;#1-临界资源&quot; class=&quot;headerlink&quot; title=&quot;1.临界资源&quot;&gt;&lt;/a&gt;1.临界资源&lt;/h2&gt;&lt;p&gt;临界资源：指并发环境当中，多个进程/线程/协程同享的资源&lt;/p&gt;
&lt;p&gt;但是临界资源在并发场景当中如果处理不当，就会导致数据不一致问题&lt;/p&gt;
&lt;h2 id=&quot;2-模拟售票超卖&quot;&gt;&lt;a href=&quot;#2-模拟售票超卖&quot; class=&quot;headerlink&quot; title=&quot;2.模拟售票超卖&quot;&gt;&lt;/a&gt;2.模拟售票超卖&lt;/h2&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; main&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ticket = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; saleTickets(&lt;span class=&quot;string&quot;&gt;&quot;售票窗口A&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; saleTickets(&lt;span class=&quot;string&quot;&gt;&quot;售票窗口B&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; saleTickets(&lt;span class=&quot;string&quot;&gt;&quot;售票窗口C&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; saleTickets(&lt;span class=&quot;string&quot;&gt;&quot;售票窗口D&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.Sleep(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;*time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;总共卖出的票数为&quot;&lt;/span&gt;,count)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;saleTickets&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rand.Seed(time.Now().UnixNano())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ticket &amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 模拟售票的处理时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			time.Sleep(time.Duration(rand.Intn(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;))*time.Microsecond)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 开始售票&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			ticket--&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(name,&lt;span class=&quot;string&quot;&gt;&quot;售出票,剩余票数为：&quot;&lt;/span&gt;,ticket)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 计算卖出的票总数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			count++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;没票了！！！&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;运行结果&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/07/rBpUXl_fCsyAWtHeAACn82mJKn8379.png&quot; height=&quot;50%&quot; width=&quot;50%&quot;&gt;&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>谈谈GoLang当中的异常处理</title>
    <link href="https://www.waibizi.com/2021/01/16/%E8%B0%88%E8%B0%88GoLang%E5%BD%93%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://www.waibizi.com/2021/01/16/%E8%B0%88%E8%B0%88GoLang%E5%BD%93%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2021-01-16T13:35:09.843Z</published>
    <updated>2021-01-16T13:51:11.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="谈谈GoLang当中的异常处理"><a href="#谈谈GoLang当中的异常处理" class="headerlink" title="谈谈GoLang当中的异常处理"></a>谈谈GoLang当中的异常处理</h1><p>GoLang并没有try…catch语句，而是采用panic跟recover配合使用来处理异常，panic在任何地方都是可以执行的，但是recover只有在defer调用才有效。</p><p>复习一下defer：</p><p>1.defer是作用于函数执行结束后的语句</p><p>2.多个defer会形成defer栈，后定义的defer语句会最先被调用</p><p>3.即使函数发生严重的错误也会执行</p><p>4.通过与匿名函数配合可以在return之后修改结果</p> <a id="more"></a><p>recover配合defer处理异常的原理：panic用于向上传递异常，执行在 defer 之后，表示非常严重不可恢复的异常，会导致程序挂掉recover可以对 panic 进行捕获，使panic 停止向上传递</p><p>代码演示如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   broken()</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">one</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">"func one"</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">two</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">"func two"</span>) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">broken</span><span class="params">()</span></span> &#123;</span><br><span class="line">   one()</span><br><span class="line">   <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="keyword">if</span> err := <span class="built_in">recover</span>();err != <span class="literal">nil</span> &#123;</span><br><span class="line">         fmt.Println(<span class="string">"func catch with Recover"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;()</span><br><span class="line">   <span class="built_in">panic</span>(<span class="string">"func broken with Panic"</span>)</span><br><span class="line">   two()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;谈谈GoLang当中的异常处理&quot;&gt;&lt;a href=&quot;#谈谈GoLang当中的异常处理&quot; class=&quot;headerlink&quot; title=&quot;谈谈GoLang当中的异常处理&quot;&gt;&lt;/a&gt;谈谈GoLang当中的异常处理&lt;/h1&gt;&lt;p&gt;GoLang并没有try…catch语句，而是采用panic跟recover配合使用来处理异常，panic在任何地方都是可以执行的，但是recover只有在defer调用才有效。&lt;/p&gt;
&lt;p&gt;复习一下defer：&lt;/p&gt;
&lt;p&gt;1.defer是作用于函数执行结束后的语句&lt;/p&gt;
&lt;p&gt;2.多个defer会形成defer栈，后定义的defer语句会最先被调用&lt;/p&gt;
&lt;p&gt;3.即使函数发生严重的错误也会执行&lt;/p&gt;
&lt;p&gt;4.通过与匿名函数配合可以在return之后修改结果&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>思迈特8道算法+2道设计模式机试题</title>
    <link href="https://www.waibizi.com/2021/01/16/%E6%80%9D%E8%BF%88%E7%89%B98%E9%81%93%E7%AE%97%E6%B3%95+2%E9%81%93%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9C%BA%E8%AF%95%E9%A2%98/"/>
    <id>https://www.waibizi.com/2021/01/16/%E6%80%9D%E8%BF%88%E7%89%B98%E9%81%93%E7%AE%97%E6%B3%95+2%E9%81%93%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%9C%BA%E8%AF%95%E9%A2%98/</id>
    <published>2021-01-16T13:35:09.839Z</published>
    <updated>2021-01-16T13:51:23.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思迈特8道算法-2道设计模式机试题"><a href="#思迈特8道算法-2道设计模式机试题" class="headerlink" title="思迈特8道算法+2道设计模式机试题"></a>思迈特8道算法+2道设计模式机试题</h1><h2 id="1-大数进制运算"><a href="#1-大数进制运算" class="headerlink" title="1.大数进制运算"></a>1.大数进制运算</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入一个长度最多为30位的十进制非负数转换为二进制（不允许采用库函数进行转换）</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这里提供四种解法，代码对应的解释都在对应位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 歪鼻子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/13 8:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="number">8</span>&amp;<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 除基倒取余法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Solution_1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">/* 输入一个十进制数字 */</span></span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="comment">/* 记录十进制的位数 */</span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* 记录最后存储的二进制 */</span></span><br><span class="line">        <span class="keyword">int</span> binary = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* 记录余数 */</span></span><br><span class="line">        <span class="keyword">int</span> r ;</span><br><span class="line">        <span class="keyword">while</span> ( n != <span class="number">0</span> )&#123;</span><br><span class="line">            r = n %<span class="number">2</span>;</span><br><span class="line">            n /= <span class="number">2</span>;</span><br><span class="line">            binary += r*Math.pow(<span class="number">10</span>,t);</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(binary);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这个方法也类似除基倒取余法，只不过上面我们采用的是Math进行十位的运算</span></span><br><span class="line"><span class="comment">     * 这个方法采用的是字符串的拼接形式，每次我们只需要将新求余的数拼接到二进制</span></span><br><span class="line"><span class="comment">     * 的头部即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Solution2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">/* 输入一个十进制数字 */</span></span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        StringBuilder bu = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ( n!=<span class="number">0</span> )&#123;</span><br><span class="line">            bu.insert(<span class="number">0</span>,n%<span class="number">2</span>);</span><br><span class="line">            n/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(bu.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们一个十进制的数字原本在计算机当中也是存储为二进制的，如果采用位运算的时候，</span></span><br><span class="line"><span class="comment">     * 使用的就是二进制的运算规则，我们直接利用这个特点，将原本的数字进行右移，从高位</span></span><br><span class="line"><span class="comment">     * 开始进行右移，例如 1010 右移29位，肯定剩下0，那么我们右移到3位的时候，就是1，</span></span><br><span class="line"><span class="comment">     * 与1运算得1，右移两位得二进制10，与1运算得0，因为我们“与1运算”的时候，只取值</span></span><br><span class="line"><span class="comment">     * 最低位那个位置，其他位置都是得0，但是题目要求的高位不想输出0，于是我们进行过滤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Solution3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">/* 输入一个十进制数字 */</span></span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> ((n &gt;&gt; i &amp; <span class="number">1</span>)!=<span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(n &gt;&gt; i &amp; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 其实这个思路与解法3类似，解法3是将原有的数字进行右移操作，而解法4是将1进行左移，然后</span></span><br><span class="line"><span class="comment">     * 进行“与原数”，太高的数字咋们就不举例子了，例如 1右移3位得1000，与1010进行与运算，得</span></span><br><span class="line"><span class="comment">     * 1000，这个数不为0，我们直接输出，而如果在第一个1出现之前的0，我们还是进行过滤即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Solution4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span> ( (n &amp;(<span class="number">1</span> &lt;&lt; i)) !=<span class="number">0</span> )&#123;</span><br><span class="line">                System.out.print(<span class="string">"1"</span>);</span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (flag != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">"0"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="2-字符串全排列"><a href="#2-字符串全排列" class="headerlink" title="2.字符串全排列"></a>2.字符串全排列</h2><h3 id="题目描述：输入：WHL-输出：HLW、HWL、LHW、LWH、WHL、WLH"><a href="#题目描述：输入：WHL-输出：HLW、HWL、LHW、LWH、WHL、WLH" class="headerlink" title="题目描述：输入：WHL    输出：HLW、HWL、LHW、LWH、WHL、WLH"></a>题目描述：输入：WHL    输出：HLW、HWL、LHW、LWH、WHL、WLH</h3><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 歪鼻子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/13 10:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 参数arrayA:给定字符串的字符数组</span></span><br><span class="line"><span class="comment">     * 参数start:开始遍历字符与其后面各个字符将要进行交换的位置</span></span><br><span class="line"><span class="comment">     * 参数end:字符串数组的最后一位</span></span><br><span class="line"><span class="comment">     * 函数功能：输出字符串数字的各个字符全排列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recursionArrange</span><span class="params">(<span class="keyword">char</span>[] array,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(end &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(start == end)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; array.length;i++)</span><br><span class="line">                System.out.print(array[i]);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start;i &lt;= end;i++)&#123;</span><br><span class="line">                swap(array,i,start);</span><br><span class="line">                recursionArrange(array,start+<span class="number">1</span>,end);</span><br><span class="line">                swap(array,i,start);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 交换数组m位置和n位置上的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] array,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> temp = array[m];</span><br><span class="line">        array[m] = array[n];</span><br><span class="line">        array[n] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String A = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] array = A.toCharArray();</span><br><span class="line">        recursionArrange(array,<span class="number">0</span>,array.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-字符串压缩"><a href="#3-字符串压缩" class="headerlink" title="3.字符串压缩"></a>3.字符串压缩</h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入：</p><p>xxxxyyyyyyzbbb</p><p>输出：</p><p>3x5yz2b</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 歪鼻子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/13 13:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = <span class="number">0</span>;</span><br><span class="line">        StringBuilder bu  = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">char</span> c = <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; s.length())&#123;</span><br><span class="line">            right = left;</span><br><span class="line">            c = s.charAt(left);</span><br><span class="line">            <span class="keyword">while</span> ((right &lt; s.length()) &amp;&amp; (s.charAt(right) == c))&#123;</span><br><span class="line">                right ++;</span><br><span class="line">            &#125;</span><br><span class="line">            count = right - left;</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">1</span>)&#123;</span><br><span class="line">                bu.append(count);</span><br><span class="line">            &#125;</span><br><span class="line">            bu.append(c);</span><br><span class="line">            left = right;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(bu.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-密码校验"><a href="#4-密码校验" class="headerlink" title="4.密码校验"></a>4.密码校验</h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>（1）、只能大写字母，小写字母，数字</p><p>（2）、不能数字开头</p><p>（3）、之上出现大写字母，小写字母，数字当中的两种</p><p>（4）、长度至少为8</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>不会，估计是配合正则表达式</p><h2 id="5-对称子串"><a href="#5-对称子串" class="headerlink" title="5.对称子串"></a>5.对称子串</h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>输入：abbaad，输出：abba</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 歪鼻子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/13 13:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findString</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="comment">/* 对字符串进行翻转 */</span></span><br><span class="line">        String rever = <span class="keyword">new</span> StringBuffer(s).reverse().toString();</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            left = i;</span><br><span class="line">            <span class="keyword">for</span> ( right = s.length();;right--)&#123;</span><br><span class="line">                <span class="keyword">if</span> (left &gt;= right) <span class="keyword">break</span>;</span><br><span class="line">                String ss = s.substring(left,right);</span><br><span class="line">                <span class="comment">/* tmp来存储当前的长度 */</span></span><br><span class="line">                <span class="keyword">int</span> tmp = right - left;</span><br><span class="line">                <span class="comment">/* 如果当前的长度大于之前的max，并且翻转的字符串包含了当前截取的字符串，那么截取的字符串就是对称了 */</span></span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; max &amp;&amp; rever.contains(ss))&#123;</span><br><span class="line">                    res = ss;</span><br><span class="line">                    max = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        findString(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-实现通配符"><a href="#6-实现通配符" class="headerlink" title="6.实现通配符"></a>6.实现通配符</h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>类似Linux的通配符星号</p><p>输入：</p><p>shopee*.com</p><p>shopeemobile.com</p><p>输出：</p><p>0 16</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>老实说，我压根没看懂也没思路</p><h2 id="7-字符串相乘"><a href="#7-字符串相乘" class="headerlink" title="7.字符串相乘"></a>7.字符串相乘</h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>例如输入123,321的字符串，然后进行相乘，不能直接采用库函数，输出：343</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>不会做，思路是拆分字符串先，在逢十进一这个逻辑自己绕晕了</p><h2 id="8-打印螺旋数组"><a href="#8-打印螺旋数组" class="headerlink" title="8.打印螺旋数组"></a>8.打印螺旋数组</h2><h3 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h3><p>这道题在我校的OJ系统当中有，题目描述太难描述了，直接上网搜下吧，有这道理的相关描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 歪鼻子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/13 14:13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>, col = <span class="number">0</span>;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        row = sc.nextInt();</span><br><span class="line">        col = sc.nextInt();</span><br><span class="line">        <span class="keyword">int</span> a[][] = findSolution(row,col);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span>  j = <span class="number">0</span>; j &lt; col; j++)&#123;</span><br><span class="line">                System.out.print(a[i][j]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 核心思想其实比较好理解，我们定义一个top,bottom,left,right来记录画到一层了，例如我们将数组的第一行画好了，</span></span><br><span class="line"><span class="comment">     * 我们就需要将top进行++操作，如果最右边的连续数字画好了，我们就将right--，同理，bottom--，left++即可</span></span><br><span class="line"><span class="comment">     * 一个循环走完就是下一次循环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] findSolution(<span class="keyword">int</span> row,<span class="keyword">int</span> col)&#123;</span><br><span class="line">        <span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span> [row][col];</span><br><span class="line">        <span class="keyword">int</span> top = <span class="number">0</span>, bottom = col-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = row-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = top, j =left;</span><br><span class="line">        <span class="keyword">int</span> sum =<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* 向右画图 */</span></span><br><span class="line">            <span class="keyword">while</span> ( j!= right+<span class="number">1</span>)&#123;</span><br><span class="line">                a[i][j] = sum;</span><br><span class="line">                sum ++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 由于上一个循环的时候，j已经越界了，所以这里需要回弹一下（j是右边界） */</span></span><br><span class="line">            j--;</span><br><span class="line">            <span class="comment">/* 这里为什么需要进行减一的原因主要是我们的sum++是在赋值之后再++的，所以最后一个位置的时候，sum必定是sum+1=row*col */</span></span><br><span class="line">            <span class="keyword">if</span> ((sum-<span class="number">1</span>)==(row*col))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 因为第一次while循环的时候，我们已经赋值了第一层了，所以top进行++ */</span></span><br><span class="line">            top++;</span><br><span class="line"></span><br><span class="line">            i = top;</span><br><span class="line">            <span class="comment">/* 向下画图 */</span></span><br><span class="line">            <span class="keyword">while</span> ( i != bottom+<span class="number">1</span> )&#123;</span><br><span class="line">                a[i][j] = sum;</span><br><span class="line">                sum++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* i这里也是由于越界了才退出上述循环，这里依旧还是回弹一下 */</span></span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">if</span> ((sum-<span class="number">1</span>)==(row*col))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 右一层已经赋值完成，再次往回缩一次 */</span></span><br><span class="line">            right--;</span><br><span class="line">            j = right;</span><br><span class="line">            <span class="comment">/* 从右向左画图了 */</span></span><br><span class="line">            <span class="keyword">while</span> ( j != left-<span class="number">1</span> )&#123;</span><br><span class="line">                a[i][j] = sum;</span><br><span class="line">                sum++;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span> ((sum-<span class="number">1</span>)==(row*col))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            bottom--;</span><br><span class="line">            i = bottom;</span><br><span class="line">            <span class="comment">/* 从下往上画图 */</span></span><br><span class="line">            <span class="keyword">while</span> ( i != top-<span class="number">1</span> )&#123;</span><br><span class="line">                a[i][j] = sum;</span><br><span class="line">                sum++;</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span> ((sum-<span class="number">1</span>)==(row*col))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            j = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-代理模式"><a href="#9-代理模式" class="headerlink" title="9.代理模式"></a>9.代理模式</h2><p>没啥输入输出要求，人工审题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 歪鼻子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/13 18:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiMaiTe</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"产品展示"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SiMaiTeProxy</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject proxy = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        proxy = <span class="keyword">new</span> SiMaiTe();</span><br><span class="line">        System.out.println(<span class="string">"代理开始"</span>);</span><br><span class="line">        proxy.display();</span><br><span class="line">        System.out.println(<span class="string">"代理结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject proxy = <span class="keyword">new</span> SiMaiTeProxy();</span><br><span class="line">        proxy.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-抽象工厂"><a href="#10-抽象工厂" class="headerlink" title="10.抽象工厂"></a>10.抽象工厂</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 歪鼻子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2020/10/13 18:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plant</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Plant</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FarmFactory</span></span>&#123;</span><br><span class="line">    <span class="function">Animal <span class="title">newAnimal</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Plant <span class="title">newPlant</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuangZhouFactory</span> <span class="keyword">implements</span> <span class="title">FarmFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Animal(<span class="string">"牛"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Plant <span class="title">newPlant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Plant(<span class="string">"蔬菜"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeiJingFactory</span> <span class="keyword">implements</span> <span class="title">FarmFactory</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Animal <span class="title">newAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Animal(<span class="string">"马"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Plant <span class="title">newPlant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Plant(<span class="string">"水果"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FarmFactory <span class="title">getFactory</span><span class="params">(String choice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (choice.equals(<span class="string">"GUANGZHOU"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> GuangZhouFactory();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (choice.equals(<span class="string">"BEIJING"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BeiJingFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FarmFactory factoryA = FactoryProducer.getFactory(<span class="string">"GUANGZHOU"</span>);</span><br><span class="line">        Animal animalA = factoryA.newAnimal();</span><br><span class="line">        Plant plantA = factoryA.newPlant();</span><br><span class="line">        FarmFactory factoryB = FactoryProducer.getFactory(<span class="string">"BEIJING"</span>);</span><br><span class="line">        Animal animalB = factoryB.newAnimal();</span><br><span class="line">        Plant plantB = factoryB.newPlant();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;思迈特8道算法-2道设计模式机试题&quot;&gt;&lt;a href=&quot;#思迈特8道算法-2道设计模式机试题&quot; class=&quot;headerlink&quot; title=&quot;思迈特8道算法+2道设计模式机试题&quot;&gt;&lt;/a&gt;思迈特8道算法+2道设计模式机试题&lt;/h1&gt;&lt;h2 id=&quot;1-大数进制运算&quot;&gt;&lt;a href=&quot;#1-大数进制运算&quot; class=&quot;headerlink&quot; title=&quot;1.大数进制运算&quot;&gt;&lt;/a&gt;1.大数进制运算&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;输入一个长度最多为30位的十进制非负数转换为二进制（不允许采用库函数进行转换）&lt;/p&gt;
&lt;h3 id=&quot;题解&quot;&gt;&lt;a href=&quot;#题解&quot; class=&quot;headerlink&quot; title=&quot;题解&quot;&gt;&lt;/a&gt;题解&lt;/h3&gt;&lt;p&gt;这里提供四种解法，代码对应的解释都在对应位置&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Author&lt;/span&gt; 歪鼻子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Date&lt;/span&gt; 2020/10/13 8:26&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Description&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@Version&lt;/span&gt; 1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&amp;amp;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 除基倒取余法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution_1&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Scanner sc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 输入一个十进制数字 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = sc.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 记录十进制的位数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 记录最后存储的二进制 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; binary = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 记录余数 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; r ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ( n != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            r = n %&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n /= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            binary += r*Math.pow(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(binary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 这个方法也类似除基倒取余法，只不过上面我们采用的是Math进行十位的运算&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 这个方法采用的是字符串的拼接形式，每次我们只需要将新求余的数拼接到二进制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 的头部即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Scanner sc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 输入一个十进制数字 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = sc.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder bu = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ( n!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bu.insert(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,n%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n/=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(bu.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 我们一个十进制的数字原本在计算机当中也是存储为二进制的，如果采用位运算的时候，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 使用的就是二进制的运算规则，我们直接利用这个特点，将原本的数字进行右移，从高位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 开始进行右移，例如 1010 右移29位，肯定剩下0，那么我们右移到3位的时候，就是1，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 与1运算得1，右移两位得二进制10，与1运算得0，因为我们“与1运算”的时候，只取值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 最低位那个位置，其他位置都是得0，但是题目要求的高位不想输出0，于是我们进行过滤&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution3&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Scanner sc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* 输入一个十进制数字 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = sc.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flag = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((n &amp;gt;&amp;gt; i &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flag = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (flag != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.print(n &amp;gt;&amp;gt; i &amp;amp; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 其实这个思路与解法3类似，解法3是将原有的数字进行右移操作，而解法4是将1进行左移，然后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 进行“与原数”，太高的数字咋们就不举例子了，例如 1右移3位得1000，与1010进行与运算，得&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * 1000，这个数不为0，我们直接输出，而如果在第一个1出现之前的0，我们还是进行过滤即可&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution4&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Scanner sc = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Scanner(System.in);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = sc.nextInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flag = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;; i &amp;gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( (n &amp;amp;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; i)) !=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; )&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flag = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (flag != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                System.out.print(&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>使用GoLang实现一个简单的反向代理</title>
    <link href="https://www.waibizi.com/2021/01/16/%E4%BD%BF%E7%94%A8GoLang%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <id>https://www.waibizi.com/2021/01/16/%E4%BD%BF%E7%94%A8GoLang%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</id>
    <published>2021-01-16T13:35:09.833Z</published>
    <updated>2021-01-16T13:51:42.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用GoLang实现一个简单的反向代理"><a href="#使用GoLang实现一个简单的反向代理" class="headerlink" title="使用GoLang实现一个简单的反向代理"></a>使用GoLang实现一个简单的反向代理</h1><h2 id="1-创建两个服务"><a href="#1-创建两个服务" class="headerlink" title="1.创建两个服务"></a>1.创建两个服务</h2><p>创建两个goroutine的服务分别监听的是8888端口跟9999端口，然后调用操作系统的信号量阻塞一下程序，让两个goroutine能够一直运行，作为一个GoLang Junior Developer最好是：Make English as your working language；所以程序当中我多数是采用英文进行注释。</p><p>创建一个web-main.go，执行一下以下代码吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> webHandlerFirst <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(webHandlerFirst)</span> <span class="title">ServeHTTP</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span>  &#123;</span><br><span class="line">writer.Write([]<span class="keyword">byte</span>(<span class="string">"&lt;h1&gt;web-1&lt;/h1&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> webHandlerSecond <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(webHandlerSecond)</span> <span class="title">ServeHTTP</span><span class="params">(writer http.ResponseWriter,request *http.Request)</span></span>  &#123;</span><br><span class="line"><span class="comment">// response string</span></span><br><span class="line">writer.Write([]<span class="keyword">byte</span>(<span class="string">"&lt;h1&gt;web-2&lt;/h1&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// this channel will blocking the main goroutine</span></span><br><span class="line">channel := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line"><span class="comment">// create goroutine to listening the port 8888</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.ListenAndServe(<span class="string">":8888"</span>,webHandlerFirst&#123;&#125;)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// create goroutine to listening the port 9999</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.ListenAndServe(<span class="string">":9999"</span>,webHandlerSecond&#123;&#125;)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// call system interrupt</span></span><br><span class="line">signal.Notify(channel,os.Interrupt)</span><br><span class="line">signal := &lt;- channel</span><br><span class="line"><span class="comment">// print signal signal log</span></span><br><span class="line">log.Println(signal)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><p>接下来是代理部分，我们根据url的不同，转发一下请求，用过nginx的同学应该很熟反向代理的概念</p><p>拿到请求的url，然后对这个url进行判断，如果是/a我们就转发到<a href="http://localhost:9999，如果是/b转发到http://localhost:8888，其他的url直接响应回去default">http://localhost:9999，如果是/b转发到http://localhost:8888，其他的url直接响应回去default</a> index</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ProxyHeader <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(* ProxyHeader)</span> <span class="title">ServeHTTP</span> <span class="params">(writer http.ResponseWriter, request * http.Request)</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>();err != <span class="literal">nil</span> &#123;</span><br><span class="line">writer.WriteHeader(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// matching the url is '/a' proxy to http://localhost:9999</span></span><br><span class="line"><span class="keyword">if</span> request.URL.Path == <span class="string">"/a"</span> &#123;</span><br><span class="line">newRequest,_ := http.NewRequest(request.Method,<span class="string">"http://localhost:9999"</span>, request.Body)</span><br><span class="line">newResponse,_ := http.DefaultClient.Do(newRequest)</span><br><span class="line"><span class="keyword">defer</span> newResponse.Body.Close()</span><br><span class="line">resCont,_ := ioutil.ReadAll(newResponse.Body)</span><br><span class="line">writer.Write(resCont)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// matching the url is '/b' proxy to http://localhost:8888</span></span><br><span class="line"><span class="keyword">if</span> request.URL.Path == <span class="string">"/b"</span> &#123;</span><br><span class="line">newRequest,_ := http.NewRequest(request.Method,<span class="string">"http://localhost:8888"</span>,request.Body)</span><br><span class="line">newResponse,_ := http.DefaultClient.Do(newRequest)</span><br><span class="line"><span class="keyword">defer</span> newResponse.Body.Close()</span><br><span class="line">resCont,_ := ioutil.ReadAll(newResponse.Body)</span><br><span class="line">writer.Write(resCont)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// other url will response string 'default index'</span></span><br><span class="line">writer.Write([]<span class="keyword">byte</span>(<span class="string">"&lt;h1&gt;default index&lt;/h1&gt;"</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>,&amp;ProxyHeader&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用GoLang实现一个简单的反向代理&quot;&gt;&lt;a href=&quot;#使用GoLang实现一个简单的反向代理&quot; class=&quot;headerlink&quot; title=&quot;使用GoLang实现一个简单的反向代理&quot;&gt;&lt;/a&gt;使用GoLang实现一个简单的反向代理&lt;/h1&gt;&lt;h2 id=&quot;1-创建两个服务&quot;&gt;&lt;a href=&quot;#1-创建两个服务&quot; class=&quot;headerlink&quot; title=&quot;1.创建两个服务&quot;&gt;&lt;/a&gt;1.创建两个服务&lt;/h2&gt;&lt;p&gt;创建两个goroutine的服务分别监听的是8888端口跟9999端口，然后调用操作系统的信号量阻塞一下程序，让两个goroutine能够一直运行，作为一个GoLang Junior Developer最好是：Make English as your working language；所以程序当中我多数是采用英文进行注释。&lt;/p&gt;
&lt;p&gt;创建一个web-main.go，执行一下以下代码吧&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; webHandlerFirst &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(webHandlerFirst)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(writer http.ResponseWriter, request *http.Request)&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	writer.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;h1&amp;gt;web-1&amp;lt;/h1&amp;gt;&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; webHandlerSecond &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(webHandlerSecond)&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServeHTTP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(writer http.ResponseWriter,request *http.Request)&lt;/span&gt;&lt;/span&gt;  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// response string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	writer.Write([]&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;h1&amp;gt;web-2&amp;lt;/h1&amp;gt;&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// this channel will blocking the main goroutine&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	channel := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; os.Signal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// create goroutine to listening the port 8888&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:8888&quot;&lt;/span&gt;,webHandlerFirst&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// create goroutine to listening the port 9999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		http.ListenAndServe(&lt;span class=&quot;string&quot;&gt;&quot;:9999&quot;&lt;/span&gt;,webHandlerSecond&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// call system interrupt&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	signal.Notify(channel,os.Interrupt)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	signal := &amp;lt;- channel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// print signal signal log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	log.Println(signal)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？</title>
    <link href="https://www.waibizi.com/2021/01/16/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E3%80%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E3%80%81%E7%81%B0%E5%BA%A6%E7%8E%AF%E5%A2%83%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E7%8E%A9%E6%84%8F%EF%BC%9F/"/>
    <id>https://www.waibizi.com/2021/01/16/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E3%80%81%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E3%80%81%E7%81%B0%E5%BA%A6%E7%8E%AF%E5%A2%83%E3%80%81%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88%E7%8E%A9%E6%84%8F%EF%BC%9F/</id>
    <published>2021-01-16T13:35:09.831Z</published>
    <updated>2021-01-16T13:51:53.746Z</updated>
    
    <content type="html"><![CDATA[<h1 id="生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？"><a href="#生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？" class="headerlink" title="生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？"></a>生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>我们需要上线一款软件都需要重重的流程才可以正式上线，总不能做了一个东西然后就直接上市场吧。好比食物，都要经过检测才可以流转到市场当中，而软件开发到上线当中有着自己的流程。</p><h2 id="2-环境介绍"><a href="#2-环境介绍" class="headerlink" title="2.环境介绍"></a>2.环境介绍</h2><p>开发当中一共有四种环境：开发环境、灰度环境、测试环境、生产环境对应的英文分别是：dev、pre、test、pro（下方采用英文代替）</p><p>dev：外部用户无法访问，开发人员使用，版本变动很大</p><p>pre：外部用户可以访问，pre在新版本迭代时使用，一部分用户先体验新版一部分体验旧版，新版使用正常的时候，pre就可以替代pro了</p><p>test：外部用户无法访问，专门给测试人员使用的，版本相对稳定</p><p>pro：面向外部用户的环境，连接上互联网即可访问的正式环境</p> <a id="more"></a><p>大部分都是采用了三种环境，即从dev -&gt; test -&gt; pro</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？&quot;&gt;&lt;a href=&quot;#生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？&quot; class=&quot;headerlink&quot; title=&quot;生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？&quot;&gt;&lt;/a&gt;生产环境、测试环境、灰度环境、开发环境究竟是什么玩意？&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;我们需要上线一款软件都需要重重的流程才可以正式上线，总不能做了一个东西然后就直接上市场吧。好比食物，都要经过检测才可以流转到市场当中，而软件开发到上线当中有着自己的流程。&lt;/p&gt;
&lt;h2 id=&quot;2-环境介绍&quot;&gt;&lt;a href=&quot;#2-环境介绍&quot; class=&quot;headerlink&quot; title=&quot;2.环境介绍&quot;&gt;&lt;/a&gt;2.环境介绍&lt;/h2&gt;&lt;p&gt;开发当中一共有四种环境：开发环境、灰度环境、测试环境、生产环境对应的英文分别是：dev、pre、test、pro（下方采用英文代替）&lt;/p&gt;
&lt;p&gt;dev：外部用户无法访问，开发人员使用，版本变动很大&lt;/p&gt;
&lt;p&gt;pre：外部用户可以访问，pre在新版本迭代时使用，一部分用户先体验新版一部分体验旧版，新版使用正常的时候，pre就可以替代pro了&lt;/p&gt;
&lt;p&gt;test：外部用户无法访问，专门给测试人员使用的，版本相对稳定&lt;/p&gt;
&lt;p&gt;pro：面向外部用户的环境，连接上互联网即可访问的正式环境&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）</title>
    <link href="https://www.waibizi.com/2021/01/16/%E4%BB%80%E4%B9%88%E6%98%AFRESTful%EF%BC%8CSpringBoot%E6%80%8E%E4%B9%88%E5%BC%95%E5%85%A5%E4%B8%9D%E8%A2%9C%E5%93%A5%EF%BC%88Swagger%EF%BC%89/"/>
    <id>https://www.waibizi.com/2021/01/16/%E4%BB%80%E4%B9%88%E6%98%AFRESTful%EF%BC%8CSpringBoot%E6%80%8E%E4%B9%88%E5%BC%95%E5%85%A5%E4%B8%9D%E8%A2%9C%E5%93%A5%EF%BC%88Swagger%EF%BC%89/</id>
    <published>2021-01-16T13:35:09.828Z</published>
    <updated>2021-01-16T13:52:06.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）"><a href="#什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）" class="headerlink" title="什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）"></a>什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在开发自己的博客系统，前端采用vue+nuxt，后端采用SpringBoot作为整体架构，所以用到一些实战的技巧就打算顺便写写文章。</p><h2 id="1-了解RESTful"><a href="#1-了解RESTful" class="headerlink" title="1.了解RESTful"></a>1.了解RESTful</h2><p>做为一个网络应用开发人，都晓得我们一个软件分为前端与后端，在前后端的交互当中，我们需要制定一个“规约”，这个规约就是我们说的REST；</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/05/rBpUXl8dIHqACZ_MAABkuFVORwk219.png" height="50%" width="50%"></div><p>REST的全称就是表述层状态转移（表述层状态转移），这是一套在互联网体系中，调用者与被调用者进行互动的规约设计，REST其实并不是什么新鲜事物了，早在2000年的时候Roy Thomas Fielding博士就在论文中提及了，Roy Thomas Fielding博士是HTTP1.0与HTTP1.1协议的主要设计者，可以说REST是在HTTP交互当中的最佳规约了。</p><p>由于自4G以来的互联网的爆炸性发展，网络应用的爆炸性增长，所以REST规约逐渐被重视了起来，那么说了那么多废话，我们还是来看看这个规约吧。</p> <a id="more"></a><h2 id="2-RESTful规范"><a href="#2-RESTful规范" class="headerlink" title="2.RESTful规范"></a>2.RESTful规范</h2><p>REST并不是什么新鲜的技术，而是在HTTP在的一种规范，首先HTTP的操作主要有<font color=" #FF8C00">GET</font>、<font color=" #FF8C00">POST</font>、<font color=" #FF8C00">DELETE、</font><font color=" #FF8C00">PUT</font>;</p><p>我们对于后端的操作最最最最常见的，也就是这四个，<font color="#FF33FF">GET</font>是获取数据的操作，<font color="#FF33FF">POST</font>是提交数据的，<font color="#FF33FF">DELETE</font>是删除资源的，<font color="#FF33FF">PUT</font>是对于资源的更新操作；</p><p>我们回想一下：前端与后端的交互当中，不就是通过URL与参数的交互与响应，URL含义是“<strong>统一资源定位符</strong>”，全称是Uniform Resource Locator，我们重新读一遍这几个字<font color="#FF33FF">“<strong>统一资源定位符</strong>”</font>，也就是对于URL来说，只需要关心这个链接是一个资源，而操作应该是停留在HTTP的操作当中：</p><p><font color=" #FF8C00">GET : URL</font>   获取这个资源</p><p><font color=" #FF8C00">DELETE : URL</font> 删除这个资源</p><p><font color=" #FF8C00">POST : URL</font> 对这个资源进行数据的提交</p><p><font color=" #FF8C00">PUT : URL</font> 更新资源</p><p>如上的语义就可以很清晰地表达你所要表达的意思了，而不应该在你的URL当中添加对于操作的动词，我见过太多太多的例子是直接getPeople（当然我之前也是这么干的）。对于同一个资源的操作，换了N多的URL。</p><p>下面简单举几个简单的示范案例</p><p>GET <a href="https://www.waibizi.com/apple/list" target="_blank" rel="noopener">https://www.waibizi.com/apple/list</a>    获取苹果列表</p><p>GET <a href="https://www.waibizi.com/apple/1" target="_blank" rel="noopener">https://www.waibizi.com/apple/1</a>    获取编号是1的苹果</p><p>PUT <a href="https://www.waibizi.com/apple/1" target="_blank" rel="noopener">https://www.waibizi.com/apple/1</a>    对于编号是1的苹果进行数据的更新</p><p>POST <a href="https://www.waibizi.com/apple" target="_blank" rel="noopener">https://www.waibizi.com/apple</a>    新增一个苹果</p><p>POST <a href="https://www.waibizi.com/apple/list" target="_blank" rel="noopener">https://www.waibizi.com/apple/list</a>   新增几个苹果（当然你的数据应该放在body当中）</p><p>DELETE <a href="https://www.waibizi.com/apple/list" target="_blank" rel="noopener">https://www.waibizi.com/apple/list</a>    删除几个苹果</p><p>………</p><p>这个REST规约并不是那么苛刻的，但是切记不要将动词放到URL当中，要对于路径参数尽可能地运用，并且你的URL声明不应该是又长又无语义化的，REST本意就是为了语义化、增强可读性，而如果你强制为了遵守REST规约，导致可读性变差也是不可取的一种行为。</p><h3 id="URI规范参考"><a href="#URI规范参考" class="headerlink" title="URI规范参考"></a>URI规范参考</h3><ul><li>使用域及子域对资源进行合理的分组或划分</li><li>在URI的路径部分使用斜杠分隔符（ / ）来表示资源之间的层次关系</li><li>在URI的路径部分使用逗号（  ，）和分号（ ； ）来表示非层次元素</li><li>使用连字符（ - ）和下划线（ _ ）来改善长路劲中的名称可读性（URI一般不使用驼峰命名）</li><li>在URI的查询部分使用 “ 与 ” 符号（ &amp; ）来分隔参数</li><li>在URI中避免出现文件扩展名（例如.php，.aspx和.jsp）</li></ul><h2 id="3-统一返回值封装"><a href="#3-统一返回值封装" class="headerlink" title="3.统一返回值封装"></a>3.统一返回值封装</h2><p>对于同一个后端请求，返回数据格式应该是统一的，而不是混乱的。下面是简单的示例，msg是对于操作的提示信息，code是HTTP的状态码，尽量遵守HTTP的状态码，而不是自己去定义一些规范，最后，data才是你实际需要的数据。</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/05/rBpUXl8dJ0OAZffwAAAYcUMiWcU944.png" height="50%" width="50%"></div><h2 id="4-Swagger介绍"><a href="#4-Swagger介绍" class="headerlink" title="4.Swagger介绍"></a>4.Swagger介绍</h2><p><font color=" #FF8C00">Swagger</font> 是一个RESTful API 工具，我们在做开发的时候，经常会因为接口文档的规范性文档，前后端需要讨论磨合文档规范才可以开发，使用Swagger可以帮助我们统一一个规范要求。在使用Spring或者SpringBoot的时候，运用这个工具，可以很快地生成交互式的接口文档，Swagger由于读音与丝袜哥相似，所以通常也会以丝袜哥称这套工具，Swagger是目前世界上最流行的API表达工具了，尽管目前有新的工具，封装了Swagger更改了UI，但是现在主流还是Swagger。</p><h2 id="5-上手Swagger"><a href="#5-上手Swagger" class="headerlink" title="5.上手Swagger"></a>5.上手Swagger</h2><h3 id="导入Swagger的依赖包"><a href="#导入Swagger的依赖包" class="headerlink" title="导入Swagger的依赖包"></a>导入Swagger的依赖包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- swagger文档相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建-SwaggerConfig-配置类"><a href="#创建-SwaggerConfig-配置类" class="headerlink" title="创建 SwaggerConfig 配置类"></a>创建 SwaggerConfig 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">/* 添加你需要被扫描为swagger的相关包路径（通常配置主路径就可以了） */</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.waibizi.blog.project"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">/* 添加swagger的标题 */</span></span><br><span class="line">                .title(<span class="string">"个人博客"</span>)</span><br><span class="line">                <span class="comment">/* 添加swagger的描述信息 */</span></span><br><span class="line">                .description(<span class="string">"歪鼻子个人博客 API 接口文档"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://www.waibizi.com"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"歪鼻子"</span>, <span class="string">"https://www.waibizi.com"</span>, <span class="string">"1253658747@qq.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接访问</p><p>项目Base路径+swagger-ui.html</p><p>因为我的路径配置了一个上下文，所以我的访问路径是</p><p>localhost:8888/blog/swagger-ui.html</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/05/rBpUXl8dLhOAAZg2AAC-8MQHIhU177.png" height="50%" width="50%"></div><h3 id="为你接口加上中文注释"><a href="#为你接口加上中文注释" class="headerlink" title="为你接口加上中文注释"></a>为你接口加上中文注释</h3><p>在Controller类加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(value = <span class="string">"文章列表以及分类"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummaryListController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Api注解说明"><a href="#Api注解说明" class="headerlink" title="@Api注解说明"></a>@Api注解说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>：用在请求的类上，表示对类的说明</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>value</td><td>控制类的说明</td></tr><tr><td>tags</td><td>控制器的标签，设置了这个之后，value会被覆盖</td></tr><tr><td>produces</td><td>返回数据的Content type    例：”application/json, application/xml”，默认为空</td></tr><tr><td>consumes</td><td>接收数据的Content type    例：”application/json, application/xml”，默认为空</td></tr><tr><td>protocols</td><td>交互的协议    例：http， https， ws， wss</td></tr><tr><td>authorizations</td><td>获取授权列表（安全声明），如果未设置，则返回一个空的授权值</td></tr><tr><td>hidden</td><td>配置为 true 将在文档中隐藏</td></tr></tbody></table><p>接口方法上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(</span><br><span class="line">           value = <span class="string">"获取分类"</span>,</span><br><span class="line">           notes = <span class="string">"获取所有的分类信息，不用携带参数"</span>,</span><br><span class="line">           produces = <span class="string">"application/json, application/xml"</span>,</span><br><span class="line">           consumes=<span class="string">"application/json, application/xml"</span>,</span><br><span class="line">           response = Category<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">           <span class="title">responseContainer</span> </span>= <span class="string">"List"</span></span><br><span class="line">   )</span><br><span class="line">   <span class="meta">@ApiResponses</span>(&#123;</span><br><span class="line">           <span class="meta">@ApiResponse</span>(code = <span class="number">200</span> ,message = <span class="string">"响应正常"</span>),</span><br><span class="line">           <span class="meta">@ApiResponse</span>(code = <span class="number">404</span> ,message = <span class="string">"资源不存在"</span>),</span><br><span class="line">           <span class="meta">@ApiResponse</span>(code = <span class="number">500</span> ,message = <span class="string">"服务器内部错误"</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="meta">@GetMapping</span>(<span class="string">"/category/list"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> BlogResult <span class="title">GetCategoryList</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> BlogResult.success(<span class="string">"查询成功"</span>,categoryService.categoryList());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="ApiOperation注解说明"><a href="#ApiOperation注解说明" class="headerlink" title="@ApiOperation注解说明"></a>@ApiOperation注解说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>：用在请求的方法上，说明方法的用途、作用</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>value</td><td>接口URL简要说明</td></tr><tr><td>notes</td><td>接口详细说明与备注</td></tr><tr><td>tags</td><td>如果设置这个值、 value的 值会被覆盖</td></tr><tr><td>response</td><td>返回值的主体类</td></tr><tr><td>responseContainer</td><td>返回值的容器，只能是”List”, “Set” or “Map”</td></tr><tr><td>responseReference</td><td>定对响应类型的引用。将覆盖任何指定的response（）类</td></tr><tr><td>httpMethod</td><td>“GET”、 “HEAD”、 “POST”、 “PUT”、 “DELETE”、 “OPTIONS” and “PATCH”</td></tr><tr><td>produces</td><td>返回数据的Content type  例：”application/json, application/xml”，默认为空</td></tr><tr><td>nickname</td><td>第三方工具唯一标识，默认为空</td></tr><tr><td>consumes</td><td>接收数据的Content type，例：”application/json, application/xml”，默认为空</td></tr><tr><td>protocols</td><td>交互的协议     例：http， https， ws， wss</td></tr><tr><td>authorizations</td><td>获取授权列表（安全声明），如果未设置，则返回一个空的授权值</td></tr><tr><td>hidden</td><td>配置为 true 将在文档中隐藏</td></tr><tr><td>responseHeaders</td><td>响应头列表</td></tr><tr><td>code</td><td>响应的HTTP状态代码。默认 200</td></tr><tr><td>extensions</td><td>扩展属性列表数组</td></tr></tbody></table><p>@ApiResponses注解说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiResponses</span>：用在请求的方法上，表示一组响应</span><br><span class="line"><span class="meta">@ApiResponse</span>：用在<span class="meta">@ApiResponses</span>中，一般用于表达一个错误的响应信息</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>code</td><td>响应的状态码</td></tr><tr><td>message</td><td>对应状态码的提示信息</td></tr><tr><td>response</td><td>抛出异常的类</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/article/summary/list/&#123;categoryId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BlogResult <span class="title">GetSummaryList</span><span class="params">( @ApiParam(name = <span class="string">"pageNum"</span>, value = <span class="string">"当前的页码"</span>, required = <span class="keyword">true</span>)</span> </span></span><br><span class="line"><span class="function">                               @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"pageNum"</span>)</span> <span class="keyword">int</span> pageNum,</span></span><br><span class="line"><span class="function">                               @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"pageSize"</span>, value = <span class="string">"一页显示数量"</span>, required = <span class="keyword">true</span>)</span> </span></span><br><span class="line"><span class="function">                               @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"pageSize"</span>)</span> <span class="keyword">int</span> pageSize,</span></span><br><span class="line"><span class="function">                               @<span class="title">ApiParam</span><span class="params">(name = <span class="string">"categoryId"</span>, value = <span class="string">"分类的ID"</span>, required = <span class="keyword">true</span>)</span> </span></span><br><span class="line"><span class="function">                               @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"categoryId"</span>)</span> <span class="keyword">int</span> categoryId)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BlogResult.success(<span class="string">"查询成功"</span>,summaryService.summaryPage(pageNum,pageSize,categoryId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ApiParam注解说明"><a href="#ApiParam注解说明" class="headerlink" title="@ApiParam注解说明"></a>@ApiParam注解说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiParam</span>： 用在请求方法中，描述参数信息</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>name</td><td>参数名称，参数名称可以覆盖方法参数名称，路径参数必须与方法参数一致</td></tr><tr><td>value</td><td>参数的简要说明</td></tr><tr><td>defaultValue</td><td>参数默认值</td></tr><tr><td>required</td><td>属性是否必填，默认为false [路径参数必须填]</td></tr></tbody></table><p>实体类上注解（采用了lombok省略了setter与gettter）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"文章分类"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Category</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"分类ID"</span>,name = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"类别名称"</span>,name = <span class="string">"categoryName"</span>)</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ApiModel注解说明"><a href="#ApiModel注解说明" class="headerlink" title="@ApiModel注解说明"></a>@ApiModel注解说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@ApiModel：用于响应类上，表示一个返回响应数据的信息</span><br></pre></td></tr></table></figure><p>这个就是一个description描述属性</p><h4 id="ApiModedProperty注解说明"><a href="#ApiModedProperty注解说明" class="headerlink" title="@ApiModedProperty注解说明"></a>@ApiModedProperty注解说明</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty</span>：用在属性上，描述响应类的属性</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>value</td><td>此属性的简要说明</td></tr><tr><td>name</td><td>允许覆盖属性名称</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）&quot;&gt;&lt;a href=&quot;#什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）&quot; class=&quot;headerlink&quot; title=&quot;什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）&quot;&gt;&lt;/a&gt;什么是RESTful，SpringBoot怎么引入丝袜哥（Swagger）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在开发自己的博客系统，前端采用vue+nuxt，后端采用SpringBoot作为整体架构，所以用到一些实战的技巧就打算顺便写写文章。&lt;/p&gt;
&lt;h2 id=&quot;1-了解RESTful&quot;&gt;&lt;a href=&quot;#1-了解RESTful&quot; class=&quot;headerlink&quot; title=&quot;1.了解RESTful&quot;&gt;&lt;/a&gt;1.了解RESTful&lt;/h2&gt;&lt;p&gt;做为一个网络应用开发人，都晓得我们一个软件分为前端与后端，在前后端的交互当中，我们需要制定一个“规约”，这个规约就是我们说的REST；&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/05/rBpUXl8dIHqACZ_MAABkuFVORwk219.png&quot; height=&quot;50%&quot; width=&quot;50%&quot;&gt;&lt;/div&gt;

&lt;p&gt;REST的全称就是表述层状态转移（表述层状态转移），这是一套在互联网体系中，调用者与被调用者进行互动的规约设计，REST其实并不是什么新鲜事物了，早在2000年的时候Roy Thomas Fielding博士就在论文中提及了，Roy Thomas Fielding博士是HTTP1.0与HTTP1.1协议的主要设计者，可以说REST是在HTTP交互当中的最佳规约了。&lt;/p&gt;
&lt;p&gt;由于自4G以来的互联网的爆炸性发展，网络应用的爆炸性增长，所以REST规约逐渐被重视了起来，那么说了那么多废话，我们还是来看看这个规约吧。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>某厂一道2sum的机试题,我竟然直接被淘汰了</title>
    <link href="https://www.waibizi.com/2021/01/16/%E6%9F%90%E5%8E%82%E4%B8%80%E9%81%932sum%E7%9A%84%E6%9C%BA%E8%AF%95%E9%A2%98,%E6%88%91%E7%AB%9F%E7%84%B6%E7%9B%B4%E6%8E%A5%E8%A2%AB%E6%B7%98%E6%B1%B0%E4%BA%86/"/>
    <id>https://www.waibizi.com/2021/01/16/%E6%9F%90%E5%8E%82%E4%B8%80%E9%81%932sum%E7%9A%84%E6%9C%BA%E8%AF%95%E9%A2%98,%E6%88%91%E7%AB%9F%E7%84%B6%E7%9B%B4%E6%8E%A5%E8%A2%AB%E6%B7%98%E6%B1%B0%E4%BA%86/</id>
    <published>2021-01-16T13:35:09.824Z</published>
    <updated>2021-01-16T13:48:32.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="某厂一道2sum的机试题-我竟然直接被淘汰了"><a href="#某厂一道2sum的机试题-我竟然直接被淘汰了" class="headerlink" title="某厂一道2sum的机试题,我竟然直接被淘汰了"></a>某厂一道2sum的机试题,我竟然直接被淘汰了</h1><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><div align="center"><img src="https://www.waibizi.com/group1/M00/00/05/rBpUXl9GXqqAf3LvAACAuMrKN9w728.jpg" height="100%" width="100%"></div><p>看到题目的时候，我暗自窃喜，这就是LeetCode的第一题啊，SoEasy!!!。可以我AC了之后，系统直接竟然评判我不及格，这很过分。事后静下心思考，既然出这么简单的题，肯定不是简单要AC，而是在时空需要进行优化！！！</p> <a id="more"></a><h2 id="2-当时的答案"><a href="#2-当时的答案" class="headerlink" title="2.当时的答案"></a>2.当时的答案</h2><p>先献上Go语言的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i:=<span class="number">0</span>; i&lt;<span class="built_in">len</span>(nums); i++ &#123;</span><br><span class="line"><span class="keyword">for</span> j:=i+<span class="number">1</span>; j&lt;<span class="built_in">len</span>(nums); j++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i]+nums[j] == target &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;i,j&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java版本的（一）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; nums.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i]+nums[j] == target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java版本的（二）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=(nums.length-<span class="number">1</span>);j&gt;=(i+<span class="number">1</span>);j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>((nums[i]+nums[j])==target)&#123;</span><br><span class="line">                    arr[<span class="number">0</span>]=i;</span><br><span class="line">                    arr[<span class="number">1</span>]=j;</span><br><span class="line">                &#125;           </span><br><span class="line">            &#125;            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><font color=" #FF8C00">思路就是暴力循环，如果等于就直接返回</font></div><p>这样的时间复杂度巨高，以至于AC之后直接凉了，两个for，时间复杂度直接O(n^2)</p><h2 id="3-优化思考"><a href="#3-优化思考" class="headerlink" title="3.优化思考"></a>3.优化思考</h2><p>从上面的解答当中，我们可以看出，缺点就是两次的for，那么我们如果减少for循环，就可以优化复杂度了。这个时候我们</p><p>需要借助一种优秀的数据结构，就是Map。既然这么简单的题，就是想考你会不会借助语言的优势去做题，毕竟我们开发</p><p>的时候，如果语言有这么优秀的结构了，你还很low地两个for，不刷你刷谁！！！！</p><p>只要将数组的值作为key，下标index作为value，然后我们直接判断target-nums[CurrentIndex]的值在Map当中是否有值，</p><p>就可以做到只用一个for循环，因为现在大多数map都是借助红黑树这种结构，判断是否有这个key并不会消耗多少时间复</p><p>杂度。 </p><p>Go版本的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">res := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>] <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> i,value:=<span class="keyword">range</span> nums&#123;</span><br><span class="line"><span class="keyword">if</span> j,exist := m[target-value];exist &#123;</span><br><span class="line">res = <span class="built_in">append</span>(res,j)</span><br><span class="line">res = <span class="built_in">append</span>(res,i)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line">m[value] = i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java版本的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(target-nums[i]))&#123;</span><br><span class="line">            res[<span class="number">0</span>] = i;</span><br><span class="line">            res[<span class="number">1</span>] = map.get(target-nums[i]);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">       map.put(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;某厂一道2sum的机试题-我竟然直接被淘汰了&quot;&gt;&lt;a href=&quot;#某厂一道2sum的机试题-我竟然直接被淘汰了&quot; class=&quot;headerlink&quot; title=&quot;某厂一道2sum的机试题,我竟然直接被淘汰了&quot;&gt;&lt;/a&gt;某厂一道2sum的机试题,我竟然直接被淘汰了&lt;/h1&gt;&lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/05/rBpUXl9GXqqAf3LvAACAuMrKN9w728.jpg&quot; height=&quot;100%&quot; width=&quot;100%&quot;&gt;&lt;/div&gt;



&lt;p&gt;看到题目的时候，我暗自窃喜，这就是LeetCode的第一题啊，SoEasy!!!。可以我AC了之后，系统直接竟然评判我不及格，这很过分。事后静下心思考，既然出这么简单的题，肯定不是简单要AC，而是在时空需要进行优化！！！&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>看完这篇文章，面试官再问你分布式缓存千万别怂！！！！</title>
    <link href="https://www.waibizi.com/2021/01/16/%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E5%86%8D%E9%97%AE%E4%BD%A0%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E5%8D%83%E4%B8%87%E5%88%AB%E6%80%82%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81/"/>
    <id>https://www.waibizi.com/2021/01/16/%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E5%86%8D%E9%97%AE%E4%BD%A0%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98%E5%8D%83%E4%B8%87%E5%88%AB%E6%80%82%EF%BC%81%EF%BC%81%EF%BC%81%EF%BC%81/</id>
    <published>2021-01-16T13:35:09.818Z</published>
    <updated>2021-01-16T13:52:59.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看完这篇文章，面试官再问你分布式缓存千万别怂！！！！"><a href="#看完这篇文章，面试官再问你分布式缓存千万别怂！！！！" class="headerlink" title="看完这篇文章，面试官再问你分布式缓存千万别怂！！！！"></a>看完这篇文章，面试官再问你分布式缓存千万别怂！！！！</h1><h2 id="1-缓存读写模式"><a href="#1-缓存读写模式" class="headerlink" title="1.缓存读写模式"></a>1.缓存读写模式</h2><p>缓存的读写模式有三种：Cache Aside(旁路缓存)、Read/Write Through(读写穿透)、Write Behind Caching(异步缓存写入)</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl914h2AIPnCAAYLQUn1dpo480.png" height="80%" width="80%"></div><h3 id="Cache-Aside-旁路缓存"><a href="#Cache-Aside-旁路缓存" class="headerlink" title="Cache Aside(旁路缓存)"></a>Cache Aside(旁路缓存)</h3><p>旁路缓存的方案：对于写请求–不管缓存存不存在数据，先更新数据库(db)，然后再由db去驱动缓存(cache)的更新，这种解决方案对于数据的强一致性会比较有保障；对于读请求–如果读取缓存的时候没有读取到缓存的话，到数据库当中读取然后再回写到缓存当中</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl917kWAR5f9AADQwVaxKPc592.png" height="60%" width="60%"></div><h3 id="Read-Write-Through-读写穿透"><a href="#Read-Write-Through-读写穿透" class="headerlink" title="Read/Write Through(读写穿透)"></a>Read/Write Through(读写穿透)</h3> <a id="more"></a><p>读写穿透的方案：对于写请求–如果在缓存不存在的情况下，只更新db，如果缓存存在的情况下，先更新缓存，然后再更新db；对于读请求–如果命中缓存直接返回，如果不命中缓存，先到数据库当中查询，然后更新缓存，再响应返回；</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl918NqADEl3AADYoapMQpk031.png" height="60%" width="60%"></div><h3 id="Write-Behind-Caching-异步缓存写入"><a href="#Write-Behind-Caching-异步缓存写入" class="headerlink" title="Write Behind Caching(异步缓存写入)"></a>Write Behind Caching(异步缓存写入)</h3><p>异步缓存写入的方案与读写穿透的方案不同的是，读写穿透是采用db与cache同步更新的方式，而异步缓存写入顾名思义就是采用异步的方式，并且是批量异步。对于写请求–如果缓存当中存在的话，只更新缓存，而db是等待一定量的缓存之后，再异步更新；这种方案对于数据一致性如果要求不是太高的情况，是非常高效的，因为在点赞这种场景下的话，如果一次点赞就同步更新一次db的话，磁盘的IO吞吐肯定是一个非常高的值;</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl918r-AZGMyAADWyGWTgMs412.png" height="60%" width="60%"></div><h2 id="2-缓存分类"><a href="#2-缓存分类" class="headerlink" title="2.缓存分类"></a>2.缓存分类</h2><p>前面介绍了缓存的基本思想、优势、代价以及读写模式，接下来一起看下互联网企业常用的缓存有哪些分类。</p><h3 id="按宿主层次分类"><a href="#按宿主层次分类" class="headerlink" title="按宿主层次分类"></a>按宿主层次分类</h3><p>按宿主层次分类的话，缓存一般可以分为本地 Cache、进程间 Cache 和远程 Cache。</p><ul><li>本地 Cache 是指业务进程内的缓存，这类缓存由于在业务系统进程内，所以读写性能超高且无任何网络开销，但不足是会随着业务系统重启而丢失。</li><li>进程间 Cache 是本机独立运行的缓存，这类缓存读写性能较高，不会随着业务系统重启丢数据，并且可以大幅减少网络开销，但不足是业务系统和缓存都在相同宿主机，运维复杂，且存在资源竞争。</li><li>远程 Cache 是指跨机器部署的缓存，这类缓存因为独立设备部署，容量大且易扩展，在互联网企业使用最广泛。不过远程缓存需要跨机访问，在高读写压力下，带宽容易成为瓶颈。</li></ul><p>（在这里插一下，UP主在上一个微服务项目当中，带宽问题对于服务之间的性能影响实在是太大了，如果你正在涉及跨机器的分布式相关业务，那么对于带宽问题这个问题应该先着手考虑）</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl91-XiAB_f2AAf5Kc58Pcw625.png" height="80%" width="80%"></div><p>进程内缓存：我们有着许许多多的方式去实现它，在Java当中，采用Map都可以直接构建进程缓存，例如Spring当中的Bean的相关设计就运用了大量的Map去作为缓存，还有Mybatis的一二级缓存都是采用Map去缓存的、当然缓存也有第三方支持，例如Google的Guava或者是Ehcache都是十分优秀的进程内缓存支持</p><p>进程间的缓存：进程间的缓存，其实进程间的缓存跟远程网络的缓存的使用是差不多的，利用第三方的组件，例如Memcached、Redis都可以实现，而对于远程缓存，我们只是将这些缓存中间件另外部署到另外一台主机上而已</p><h3 id="按存储介质分类"><a href="#按存储介质分类" class="headerlink" title="按存储介质分类"></a>按存储介质分类</h3><p>还有一种常见的分类方式是按存储介质来分，这样可以分为内存型缓存和持久化型缓存。</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl92Fl2APseGAAIYM0YCSws816.png" height="80%" width="80%"></div><ul><li>内存型缓存将数据存储在内存，读写性能很高，但缓存系统重启或 Crash 后，内存数据会丢失。</li><li>持久化型缓存将数据存储到 SSD/Fusion-IO 硬盘中，相同成本下，这种缓存的容量会比内存型缓存大 1 个数量级以上，而且数据会持久化落地，重启不丢失，但读写性能相对低 1～2 个数量级。Memcached 是典型的内存型缓存，而 Pika 以及其他基于 RocksDB 开发的缓存组件等则属于持久化型缓存。</li></ul><h2 id="3-缓存七大经典问题"><a href="#3-缓存七大经典问题" class="headerlink" title="3.缓存七大经典问题"></a>3.缓存七大经典问题</h2><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl92GA-AXRw6AADkZbvP_V4094.png" height="80%" width="80%"></div><h3 id="缓存失效‘"><a href="#缓存失效‘" class="headerlink" title="缓存失效‘"></a>缓存失效‘</h3><h4 id="问题描述：大量的key同时过期，访问cache时没有命中，穿透到db当中，查询都到db当中进行查询，db的压力激增，慢查询剧增"><a href="#问题描述：大量的key同时过期，访问cache时没有命中，穿透到db当中，查询都到db当中进行查询，db的压力激增，慢查询剧增" class="headerlink" title="问题描述：大量的key同时过期，访问cache时没有命中，穿透到db当中，查询都到db当中进行查询，db的压力激增，慢查询剧增"></a>问题描述：大量的key同时过期，访问cache时没有命中，穿透到db当中，查询都到db当中进行查询，db的压力激增，慢查询剧增</h4><h4 id="原因分析：我们在设置过期时间的时候，往往都是根据业务的需求，设置固定的过期时间，一般情况下，缓存都是逐步写入的，但在一些特定的场景下-如进行缓存预热的场景-，会有大批量的db数据同步到cache当中，这时，缓存当中便存在大量的过期时间相同的key，这些key如果同时失效的情况下，刚好有大规模的请求到来，就会穿透到db当中进行查询。"><a href="#原因分析：我们在设置过期时间的时候，往往都是根据业务的需求，设置固定的过期时间，一般情况下，缓存都是逐步写入的，但在一些特定的场景下-如进行缓存预热的场景-，会有大批量的db数据同步到cache当中，这时，缓存当中便存在大量的过期时间相同的key，这些key如果同时失效的情况下，刚好有大规模的请求到来，就会穿透到db当中进行查询。" class="headerlink" title="原因分析：我们在设置过期时间的时候，往往都是根据业务的需求，设置固定的过期时间，一般情况下，缓存都是逐步写入的，但在一些特定的场景下(如进行缓存预热的场景)，会有大批量的db数据同步到cache当中，这时，缓存当中便存在大量的过期时间相同的key，这些key如果同时失效的情况下，刚好有大规模的请求到来，就会穿透到db当中进行查询。"></a>原因分析：我们在设置过期时间的时候，往往都是根据业务的需求，设置固定的过期时间，一般情况下，缓存都是逐步写入的，但在一些特定的场景下(如进行缓存预热的场景)，会有大批量的db数据同步到cache当中，这时，缓存当中便存在大量的过期时间相同的key，这些key如果同时失效的情况下，刚好有大规模的请求到来，就会穿透到db当中进行查询。</h4><h4 id="解决方案：既然是因为大批量的数据过期时间一致，那我们的解决方案也是在这着手：设计缓存的过期时间时，使用公式：过期时间-baes-时间-随机时间。即相同业务数据写缓存时，在基础过期时间之上，再加一个随机的过期时间，让数据在未来一段时间内慢慢过期，避免瞬时全部过期，对-DB-造成过大压力"><a href="#解决方案：既然是因为大批量的数据过期时间一致，那我们的解决方案也是在这着手：设计缓存的过期时间时，使用公式：过期时间-baes-时间-随机时间。即相同业务数据写缓存时，在基础过期时间之上，再加一个随机的过期时间，让数据在未来一段时间内慢慢过期，避免瞬时全部过期，对-DB-造成过大压力" class="headerlink" title="解决方案：既然是因为大批量的数据过期时间一致，那我们的解决方案也是在这着手：设计缓存的过期时间时，使用公式：过期时间=baes 时间+随机时间。即相同业务数据写缓存时，在基础过期时间之上，再加一个随机的过期时间，让数据在未来一段时间内慢慢过期，避免瞬时全部过期，对 DB 造成过大压力"></a>解决方案：既然是因为大批量的数据过期时间一致，那我们的解决方案也是在这着手：设计缓存的过期时间时，使用公式：过期时间=baes 时间+随机时间。即相同业务数据写缓存时，在基础过期时间之上，再加一个随机的过期时间，让数据在未来一段时间内慢慢过期，避免瞬时全部过期，对 DB 造成过大压力</h4><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="问题描述：缓存穿透的问题比较有意思一些，我们一般的思路是先访问缓存，如果缓存没有，我们就去数据库加载然后回写到缓存当中，但是如果查缓存的时候，这个key既不在缓存，也不在数据库，也就是说这个key压根就不存在，而用户可以采用肉鸡不断去轮询这个有漏洞的接口，这样就会持续访问db，去db当中查找数据，如果请求量大，也会导致IO的吞吐激增，导致db慢查询。"><a href="#问题描述：缓存穿透的问题比较有意思一些，我们一般的思路是先访问缓存，如果缓存没有，我们就去数据库加载然后回写到缓存当中，但是如果查缓存的时候，这个key既不在缓存，也不在数据库，也就是说这个key压根就不存在，而用户可以采用肉鸡不断去轮询这个有漏洞的接口，这样就会持续访问db，去db当中查找数据，如果请求量大，也会导致IO的吞吐激增，导致db慢查询。" class="headerlink" title="问题描述：缓存穿透的问题比较有意思一些，我们一般的思路是先访问缓存，如果缓存没有，我们就去数据库加载然后回写到缓存当中，但是如果查缓存的时候，这个key既不在缓存，也不在数据库，也就是说这个key压根就不存在，而用户可以采用肉鸡不断去轮询这个有漏洞的接口，这样就会持续访问db，去db当中查找数据，如果请求量大，也会导致IO的吞吐激增，导致db慢查询。"></a>问题描述：缓存穿透的问题比较有意思一些，我们一般的思路是先访问缓存，如果缓存没有，我们就去数据库加载然后回写到缓存当中，但是如果查缓存的时候，这个key既不在缓存，也不在数据库，也就是说这个key压根就不存在，而用户可以采用肉鸡不断去轮询这个有漏洞的接口，这样就会持续访问db，去db当中查找数据，如果请求量大，也会导致IO的吞吐激增，导致db慢查询。</h4><h4 id="原因分析：缓存穿透问题主要是我们在设计缓存的时候，都是考虑正常查缓存的思维逻辑，而没有去思考像以上的这种特殊情况。"><a href="#原因分析：缓存穿透问题主要是我们在设计缓存的时候，都是考虑正常查缓存的思维逻辑，而没有去思考像以上的这种特殊情况。" class="headerlink" title="原因分析：缓存穿透问题主要是我们在设计缓存的时候，都是考虑正常查缓存的思维逻辑，而没有去思考像以上的这种特殊情况。"></a>原因分析：缓存穿透问题主要是我们在设计缓存的时候，都是考虑正常查缓存的思维逻辑，而没有去思考像以上的这种特殊情况。</h4><h4 id="解决方案：第一种解决方案是我们在db当中查询出来的是NULL值时，仍然保存再cache当中，只不过这个NULL我们可以采用一些特殊的值存储，这样下次访问cache的时候，只会返回这个特殊值，而不会访问db，进而保护了db；第二种解决方案是采用布隆过滤器，也就是缓存的过滤器，可以通过布隆过滤器判断这个key是否真的存在"><a href="#解决方案：第一种解决方案是我们在db当中查询出来的是NULL值时，仍然保存再cache当中，只不过这个NULL我们可以采用一些特殊的值存储，这样下次访问cache的时候，只会返回这个特殊值，而不会访问db，进而保护了db；第二种解决方案是采用布隆过滤器，也就是缓存的过滤器，可以通过布隆过滤器判断这个key是否真的存在" class="headerlink" title="解决方案：第一种解决方案是我们在db当中查询出来的是NULL值时，仍然保存再cache当中，只不过这个NULL我们可以采用一些特殊的值存储，这样下次访问cache的时候，只会返回这个特殊值，而不会访问db，进而保护了db；第二种解决方案是采用布隆过滤器，也就是缓存的过滤器，可以通过布隆过滤器判断这个key是否真的存在"></a>解决方案：第一种解决方案是我们在db当中查询出来的是NULL值时，仍然保存再cache当中，只不过这个NULL我们可以采用一些特殊的值存储，这样下次访问cache的时候，只会返回这个特殊值，而不会访问db，进而保护了db；第二种解决方案是采用布隆过滤器，也就是缓存的过滤器，可以通过布隆过滤器判断这个key是否真的存在</h4><h4 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h4><ul><li>对于方案一，如果特殊访客持续访问大量的不存在的 key，这些 key 即便只存一个简单的默认值，也会占用大量的缓存空间，导致正常 key 的命中率下降。所以进一步的改进措施是，对这些不存在的 key 只存较短的时间，让它们尽快过期；或者将这些不存在的 key 存在一个独立的公共缓存，从缓存查找时，先查正常的缓存组件，如果 miss，则查一下公共的非法 key 的缓存，如果后者命中，直接返回，否则穿透 DB，如果查出来是空，则回种到非法 key 缓存，否则回种到正常缓存。</li><li>对于方案二，BloomFilter 要缓存全量的 key，这就要求全量的 key 数量不大，10亿 条数据以内最佳，因为 10亿 条数据大概要占用 1.2GB 的内存。也可以用 BloomFilter 缓存非法 key，每次发现一个 key 是不存在的非法 key，就记录到 BloomFilter 中，这种记录方案，会导致 BloomFilter 存储的 key 持续高速增长，为了避免记录 key 太多而导致误判率增大，需要定期清零处理。</li></ul><h3 id="知识扩展-布隆过滤器（BloomFilter-）"><a href="#知识扩展-布隆过滤器（BloomFilter-）" class="headerlink" title="知识扩展-布隆过滤器（BloomFilter ）"></a>知识扩展-布隆过滤器（BloomFilter ）</h3><p>BloomFilter 是一个非常有意思的数据结构，不仅仅可以挡住非法 key 攻击，还可以低成本、高性能地对海量数据进行判断</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl92oyKAdjQEAAGffiXgUfg095.png" height="80%" width="80%"></div><p>BloomFilter 的目的是检测一个元素是否存在于一个集合内。它的原理，是用 bit 数据组来表示一个集合，对一个 key 进行多次不同的 Hash 检测，如果所有 Hash 对应的 bit 位都是 1，则表明 key 非常大概率存在，平均单记录占用 1.2 字节即可达到 99%，只要有一次 Hash 对应的 bit 位是 0，就说明这个 key 肯定不存在于这个集合内。</p><p>BloomFilter 的算法是，首先分配一块内存空间做 bit 数组，数组的 bit 位初始值全部设为 0，加入元素时，采用 k 个相互独立的 Hash 函数计算，然后将元素 Hash 映射的 K 个位置全部设置为 1。检测 key 时，仍然用这 k 个 Hash 函数计算出 k 个位置，如果位置全部为 1，则表明 key 存在，否则不存在。</p><p>BloomFilter 的优势是，全内存操作，性能很高。另外空间效率非常高，要达到 1% 的误判率，平均单条记录占用 1.2 字节即可。而且，平均单条记录每增加 0.6 字节，还可让误判率继续变为之前的 1/10，即平均单条记录占用 1.8 字节，误判率可以达到 1/1000；平均单条记录占用 2.4 字节，误判率可以到 1/10000，以此类推。这里的误判率是指，BloomFilter 判断某个 key 存在，但它实际不存在的概率，因为它存的是 key 的 Hash 值，而非 key 的值，所以有概率存在这样的 key，它们内容不同，但多次 Hash 后的 Hash 值都相同。对于 BloomFilter 判断不存在的 key ，则是 100% 不存在的，反证法，如果这个 key 存在，那它每次 Hash 后对应的 Hash 值位置肯定是 1，而不会是 0。</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="问题描述：系统运行过程中，缓存雪崩是一个非常严重的问题。缓存雪崩是指部分缓存节点不可用，导致整个缓存体系甚至甚至服务系统不可用的情况。缓存雪崩按照缓存是否-rehash（即是否漂移）分两种情况："><a href="#问题描述：系统运行过程中，缓存雪崩是一个非常严重的问题。缓存雪崩是指部分缓存节点不可用，导致整个缓存体系甚至甚至服务系统不可用的情况。缓存雪崩按照缓存是否-rehash（即是否漂移）分两种情况：" class="headerlink" title="问题描述：系统运行过程中，缓存雪崩是一个非常严重的问题。缓存雪崩是指部分缓存节点不可用，导致整个缓存体系甚至甚至服务系统不可用的情况。缓存雪崩按照缓存是否 rehash（即是否漂移）分两种情况："></a>问题描述：系统运行过程中，缓存雪崩是一个非常严重的问题。缓存雪崩是指部分缓存节点不可用，导致整个缓存体系甚至甚至服务系统不可用的情况。缓存雪崩按照缓存是否 rehash（即是否漂移）分两种情况：</h4><pre><code>- 缓存不支持 rehash 导致的系统雪崩不可用- 缓存支持 rehash 导致的缓存雪崩不可用</code></pre><h4 id="原因分析：1-缓存不支持rehash的缓存雪崩问题，根据缓存读写模式可知，如果缓存不命中，会到db当中，请求，而db所能承受的请求量远远比不上缓存，请求量过大，就很容易造成-DB-过载，大量慢查询，最终阻塞甚至-Crash，从而导致服务异常。2-缓存支持rehash，设计缓存的时候，大部分人采用缓存的分布模式都是采用一致性的hash分布方式，在部分节点异常的情况下，采用rehash的策略，即把异常节点请求平均分散到其他缓存节点。在一般情况下，一致性-Hash-分布-rehash-策略可以很好得运行，但在较大的流量洪峰到临之时，如果大流量-key-比较集中，正好在某-1～2-个缓存节点，很容易将这些缓存节点的内存、网卡过载，缓存节点异常-Crash，然后这些异常节点下线，这些大流量-key-请求又被-rehash-到其他缓存节点，进而导致其他缓存节点也被过载-Crash，缓存异常持续扩散，最终导致整个缓存体系异常，无法对外提供服务。"><a href="#原因分析：1-缓存不支持rehash的缓存雪崩问题，根据缓存读写模式可知，如果缓存不命中，会到db当中，请求，而db所能承受的请求量远远比不上缓存，请求量过大，就很容易造成-DB-过载，大量慢查询，最终阻塞甚至-Crash，从而导致服务异常。2-缓存支持rehash，设计缓存的时候，大部分人采用缓存的分布模式都是采用一致性的hash分布方式，在部分节点异常的情况下，采用rehash的策略，即把异常节点请求平均分散到其他缓存节点。在一般情况下，一致性-Hash-分布-rehash-策略可以很好得运行，但在较大的流量洪峰到临之时，如果大流量-key-比较集中，正好在某-1～2-个缓存节点，很容易将这些缓存节点的内存、网卡过载，缓存节点异常-Crash，然后这些异常节点下线，这些大流量-key-请求又被-rehash-到其他缓存节点，进而导致其他缓存节点也被过载-Crash，缓存异常持续扩散，最终导致整个缓存体系异常，无法对外提供服务。" class="headerlink" title="原因分析：1.缓存不支持rehash的缓存雪崩问题，根据缓存读写模式可知，如果缓存不命中，会到db当中，请求，而db所能承受的请求量远远比不上缓存，请求量过大，就很容易造成 DB 过载，大量慢查询，最终阻塞甚至 Crash，从而导致服务异常。2.缓存支持rehash，设计缓存的时候，大部分人采用缓存的分布模式都是采用一致性的hash分布方式，在部分节点异常的情况下，采用rehash的策略，即把异常节点请求平均分散到其他缓存节点。在一般情况下，一致性 Hash 分布+rehash 策略可以很好得运行，但在较大的流量洪峰到临之时，如果大流量 key 比较集中，正好在某 1～2 个缓存节点，很容易将这些缓存节点的内存、网卡过载，缓存节点异常 Crash，然后这些异常节点下线，这些大流量 key 请求又被 rehash 到其他缓存节点，进而导致其他缓存节点也被过载 Crash，缓存异常持续扩散，最终导致整个缓存体系异常，无法对外提供服务。"></a>原因分析：1.缓存不支持rehash的缓存雪崩问题，根据缓存读写模式可知，如果缓存不命中，会到db当中，请求，而db所能承受的请求量远远比不上缓存，请求量过大，就很容易造成 DB 过载，大量慢查询，最终阻塞甚至 Crash，从而导致服务异常。2.缓存支持rehash，设计缓存的时候，大部分人采用缓存的分布模式都是采用一致性的hash分布方式，在部分节点异常的情况下，采用rehash的策略，即把异常节点请求平均分散到其他缓存节点。在一般情况下，一致性 Hash 分布+rehash 策略可以很好得运行，但在较大的流量洪峰到临之时，如果大流量 key 比较集中，正好在某 1～2 个缓存节点，很容易将这些缓存节点的内存、网卡过载，缓存节点异常 Crash，然后这些异常节点下线，这些大流量 key 请求又被 rehash 到其他缓存节点，进而导致其他缓存节点也被过载 Crash，缓存异常持续扩散，最终导致整个缓存体系异常，无法对外提供服务。</h4><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><h5 id="方案一，对业务-DB-的访问增加读写开关，当发现-DB-请求变慢、阻塞，慢请求超过阀值时，就会关闭读开关，部分或所有读-DB-的请求进行-failfast-立即返回，待-DB-恢复后再打开读开关。"><a href="#方案一，对业务-DB-的访问增加读写开关，当发现-DB-请求变慢、阻塞，慢请求超过阀值时，就会关闭读开关，部分或所有读-DB-的请求进行-failfast-立即返回，待-DB-恢复后再打开读开关。" class="headerlink" title="方案一，对业务 DB 的访问增加读写开关，当发现 DB 请求变慢、阻塞，慢请求超过阀值时，就会关闭读开关，部分或所有读 DB 的请求进行 failfast 立即返回，待 DB 恢复后再打开读开关。"></a>方案一，对业务 DB 的访问增加读写开关，当发现 DB 请求变慢、阻塞，慢请求超过阀值时，就会关闭读开关，部分或所有读 DB 的请求进行 failfast 立即返回，待 DB 恢复后再打开读开关。</h5><h5 id="方案二，对缓存增加多个副本，缓存异常或请求-miss-后，再读取其他缓存副本，而且多个缓存副本尽量部署在不同机架，从而确保在任何情况下，缓存系统都会正常对外提供服务。"><a href="#方案二，对缓存增加多个副本，缓存异常或请求-miss-后，再读取其他缓存副本，而且多个缓存副本尽量部署在不同机架，从而确保在任何情况下，缓存系统都会正常对外提供服务。" class="headerlink" title="方案二，对缓存增加多个副本，缓存异常或请求 miss 后，再读取其他缓存副本，而且多个缓存副本尽量部署在不同机架，从而确保在任何情况下，缓存系统都会正常对外提供服务。"></a>方案二，对缓存增加多个副本，缓存异常或请求 miss 后，再读取其他缓存副本，而且多个缓存副本尽量部署在不同机架，从而确保在任何情况下，缓存系统都会正常对外提供服务。</h5><h5 id="方案三，对缓存体系进行实时监控，当请求访问的慢速比超过阀值时，及时报警，通过机器替换、服务替换进行及时恢复；也可以通过各种自动故障转移策略，自动关闭异常接口、停止边缘服务、停止部分非核心功能措施，确保在极端场景下，核心功能的正常运行。"><a href="#方案三，对缓存体系进行实时监控，当请求访问的慢速比超过阀值时，及时报警，通过机器替换、服务替换进行及时恢复；也可以通过各种自动故障转移策略，自动关闭异常接口、停止边缘服务、停止部分非核心功能措施，确保在极端场景下，核心功能的正常运行。" class="headerlink" title="方案三，对缓存体系进行实时监控，当请求访问的慢速比超过阀值时，及时报警，通过机器替换、服务替换进行及时恢复；也可以通过各种自动故障转移策略，自动关闭异常接口、停止边缘服务、停止部分非核心功能措施，确保在极端场景下，核心功能的正常运行。"></a>方案三，对缓存体系进行实时监控，当请求访问的慢速比超过阀值时，及时报警，通过机器替换、服务替换进行及时恢复；也可以通过各种自动故障转移策略，自动关闭异常接口、停止边缘服务、停止部分非核心功能措施，确保在极端场景下，核心功能的正常运行。</h5><h3 id="数据不一致"><a href="#数据不一致" class="headerlink" title="数据不一致"></a>数据不一致</h3><h4 id="问题描述：七大缓存经典问题的第四个问题是数据不一致。同一份数据，可能会同时存在-DB-和缓存之中。那就有可能发生，DB-和缓存的数据不一致。如果缓存有多个副本，多个缓存副本里的数据也可能会发生不一致现象。"><a href="#问题描述：七大缓存经典问题的第四个问题是数据不一致。同一份数据，可能会同时存在-DB-和缓存之中。那就有可能发生，DB-和缓存的数据不一致。如果缓存有多个副本，多个缓存副本里的数据也可能会发生不一致现象。" class="headerlink" title="问题描述：七大缓存经典问题的第四个问题是数据不一致。同一份数据，可能会同时存在 DB 和缓存之中。那就有可能发生，DB 和缓存的数据不一致。如果缓存有多个副本，多个缓存副本里的数据也可能会发生不一致现象。"></a>问题描述：七大缓存经典问题的第四个问题是数据不一致。同一份数据，可能会同时存在 DB 和缓存之中。那就有可能发生，DB 和缓存的数据不一致。如果缓存有多个副本，多个缓存副本里的数据也可能会发生不一致现象。</h4><h4 id="原因分析：不一致的问题大多跟缓存更新异常有关。比如更新-DB-后，写缓存失败，从而导致缓存中存的是老数据。另外，如果系统采用一致性-Hash-分布，同时采用-rehash-自动漂移策略，在节点多次上下线之后，也会产生脏数据。缓存有多个副本时，更新某个副本失败，也会导致这个副本的数据是老数据。"><a href="#原因分析：不一致的问题大多跟缓存更新异常有关。比如更新-DB-后，写缓存失败，从而导致缓存中存的是老数据。另外，如果系统采用一致性-Hash-分布，同时采用-rehash-自动漂移策略，在节点多次上下线之后，也会产生脏数据。缓存有多个副本时，更新某个副本失败，也会导致这个副本的数据是老数据。" class="headerlink" title="原因分析：不一致的问题大多跟缓存更新异常有关。比如更新 DB 后，写缓存失败，从而导致缓存中存的是老数据。另外，如果系统采用一致性 Hash 分布，同时采用 rehash 自动漂移策略，在节点多次上下线之后，也会产生脏数据。缓存有多个副本时，更新某个副本失败，也会导致这个副本的数据是老数据。"></a>原因分析：不一致的问题大多跟缓存更新异常有关。比如更新 DB 后，写缓存失败，从而导致缓存中存的是老数据。另外，如果系统采用一致性 Hash 分布，同时采用 rehash 自动漂移策略，在节点多次上下线之后，也会产生脏数据。缓存有多个副本时，更新某个副本失败，也会导致这个副本的数据是老数据。</h4><h4 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h4><h5 id="方案一：cache-更新失败后，可以进行重试，如果重试失败，则将失败的-key-写入队列机服务，待缓存访问恢复后，将这些-key-从缓存删除。这些-key-在再次被查询时，重新从-DB-加载，从而保证数据的一致性。"><a href="#方案一：cache-更新失败后，可以进行重试，如果重试失败，则将失败的-key-写入队列机服务，待缓存访问恢复后，将这些-key-从缓存删除。这些-key-在再次被查询时，重新从-DB-加载，从而保证数据的一致性。" class="headerlink" title="方案一：cache 更新失败后，可以进行重试，如果重试失败，则将失败的 key 写入队列机服务，待缓存访问恢复后，将这些 key 从缓存删除。这些 key 在再次被查询时，重新从 DB 加载，从而保证数据的一致性。"></a>方案一：cache 更新失败后，可以进行重试，如果重试失败，则将失败的 key 写入队列机服务，待缓存访问恢复后，将这些 key 从缓存删除。这些 key 在再次被查询时，重新从 DB 加载，从而保证数据的一致性。</h5><h5 id="方案二：缓存时间适当调短，让缓存数据及早过期后，然后从-DB-重新加载，确保数据的最终一致性。"><a href="#方案二：缓存时间适当调短，让缓存数据及早过期后，然后从-DB-重新加载，确保数据的最终一致性。" class="headerlink" title="方案二：缓存时间适当调短，让缓存数据及早过期后，然后从 DB 重新加载，确保数据的最终一致性。"></a>方案二：缓存时间适当调短，让缓存数据及早过期后，然后从 DB 重新加载，确保数据的最终一致性。</h5><h5 id="方案三：不采用-rehash-漂移策略，而采用缓存分层策略，尽量避免脏数据产生。"><a href="#方案三：不采用-rehash-漂移策略，而采用缓存分层策略，尽量避免脏数据产生。" class="headerlink" title="方案三：不采用 rehash 漂移策略，而采用缓存分层策略，尽量避免脏数据产生。"></a>方案三：不采用 rehash 漂移策略，而采用缓存分层策略，尽量避免脏数据产生。</h5><h3 id="数据并发竞争"><a href="#数据并发竞争" class="headerlink" title="数据并发竞争"></a>数据并发竞争</h3><h5 id="问题描述：互联网系统，线上流量较大，缓存访问中很容易出现数据并发竞争的现象。数据并发竞争，是指在高并发访问场景，一旦缓存访问没有找到数据，大量请求就会并发查询-DB，导致-DB-压力大增的现象。"><a href="#问题描述：互联网系统，线上流量较大，缓存访问中很容易出现数据并发竞争的现象。数据并发竞争，是指在高并发访问场景，一旦缓存访问没有找到数据，大量请求就会并发查询-DB，导致-DB-压力大增的现象。" class="headerlink" title="问题描述：互联网系统，线上流量较大，缓存访问中很容易出现数据并发竞争的现象。数据并发竞争，是指在高并发访问场景，一旦缓存访问没有找到数据，大量请求就会并发查询 DB，导致 DB 压力大增的现象。"></a>问题描述：互联网系统，线上流量较大，缓存访问中很容易出现数据并发竞争的现象。数据并发竞争，是指在高并发访问场景，一旦缓存访问没有找到数据，大量请求就会并发查询 DB，导致 DB 压力大增的现象。</h5><h5 id="原因分析：数据并发竞争，主要是由于多个进程-线程中，有大量并发请求获取相同的数据，而这个数据-key-因为正好过期、被剔除等各种原因在缓存中不存在，这些进程-线程之间没有任何协调，然后一起并发查询-DB，请求那个相同的-key，最终导致-DB-压力大增。"><a href="#原因分析：数据并发竞争，主要是由于多个进程-线程中，有大量并发请求获取相同的数据，而这个数据-key-因为正好过期、被剔除等各种原因在缓存中不存在，这些进程-线程之间没有任何协调，然后一起并发查询-DB，请求那个相同的-key，最终导致-DB-压力大增。" class="headerlink" title="原因分析：数据并发竞争，主要是由于多个进程/线程中，有大量并发请求获取相同的数据，而这个数据 key 因为正好过期、被剔除等各种原因在缓存中不存在，这些进程/线程之间没有任何协调，然后一起并发查询 DB，请求那个相同的 key，最终导致 DB 压力大增。"></a>原因分析：数据并发竞争，主要是由于多个进程/线程中，有大量并发请求获取相同的数据，而这个数据 key 因为正好过期、被剔除等各种原因在缓存中不存在，这些进程/线程之间没有任何协调，然后一起并发查询 DB，请求那个相同的 key，最终导致 DB 压力大增。</h5><h4 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h4><h5 id="方案一：是使用全局锁。如下图所示，即当缓存请求-miss-后，先尝试加全局锁，只有加全局锁成功的线程，才可以到-DB-去加载数据。其他进程-线程在读取缓存数据-miss-时，如果发现这个-key-有全局锁，就进行等待，待之前的线程将数据从-DB-回种到缓存后，再从缓存获取。"><a href="#方案一：是使用全局锁。如下图所示，即当缓存请求-miss-后，先尝试加全局锁，只有加全局锁成功的线程，才可以到-DB-去加载数据。其他进程-线程在读取缓存数据-miss-时，如果发现这个-key-有全局锁，就进行等待，待之前的线程将数据从-DB-回种到缓存后，再从缓存获取。" class="headerlink" title="方案一：是使用全局锁。如下图所示，即当缓存请求 miss 后，先尝试加全局锁，只有加全局锁成功的线程，才可以到 DB 去加载数据。其他进程/线程在读取缓存数据 miss 时，如果发现这个 key 有全局锁，就进行等待，待之前的线程将数据从 DB 回种到缓存后，再从缓存获取。"></a>方案一：是使用全局锁。如下图所示，即当缓存请求 miss 后，先尝试加全局锁，只有加全局锁成功的线程，才可以到 DB 去加载数据。其他进程/线程在读取缓存数据 miss 时，如果发现这个 key 有全局锁，就进行等待，待之前的线程将数据从 DB 回种到缓存后，再从缓存获取。</h5><h5 id="方案二：对缓存数据保持多个备份，即便其中一个备份中的数据过期或被剔除了，还可以访问其他备份，从而减少数据并发竞争的情况"><a href="#方案二：对缓存数据保持多个备份，即便其中一个备份中的数据过期或被剔除了，还可以访问其他备份，从而减少数据并发竞争的情况" class="headerlink" title="方案二：对缓存数据保持多个备份，即便其中一个备份中的数据过期或被剔除了，还可以访问其他备份，从而减少数据并发竞争的情况"></a>方案二：对缓存数据保持多个备份，即便其中一个备份中的数据过期或被剔除了，还可以访问其他备份，从而减少数据并发竞争的情况</h5>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;看完这篇文章，面试官再问你分布式缓存千万别怂！！！！&quot;&gt;&lt;a href=&quot;#看完这篇文章，面试官再问你分布式缓存千万别怂！！！！&quot; class=&quot;headerlink&quot; title=&quot;看完这篇文章，面试官再问你分布式缓存千万别怂！！！！&quot;&gt;&lt;/a&gt;看完这篇文章，面试官再问你分布式缓存千万别怂！！！！&lt;/h1&gt;&lt;h2 id=&quot;1-缓存读写模式&quot;&gt;&lt;a href=&quot;#1-缓存读写模式&quot; class=&quot;headerlink&quot; title=&quot;1.缓存读写模式&quot;&gt;&lt;/a&gt;1.缓存读写模式&lt;/h2&gt;&lt;p&gt;缓存的读写模式有三种：Cache Aside(旁路缓存)、Read/Write Through(读写穿透)、Write Behind Caching(异步缓存写入)&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/06/rBpUXl914h2AIPnCAAYLQUn1dpo480.png&quot; height=&quot;80%&quot; width=&quot;80%&quot;&gt;&lt;/div&gt;



&lt;h3 id=&quot;Cache-Aside-旁路缓存&quot;&gt;&lt;a href=&quot;#Cache-Aside-旁路缓存&quot; class=&quot;headerlink&quot; title=&quot;Cache Aside(旁路缓存)&quot;&gt;&lt;/a&gt;Cache Aside(旁路缓存)&lt;/h3&gt;&lt;p&gt;旁路缓存的方案：对于写请求–不管缓存存不存在数据，先更新数据库(db)，然后再由db去驱动缓存(cache)的更新，这种解决方案对于数据的强一致性会比较有保障；对于读请求–如果读取缓存的时候没有读取到缓存的话，到数据库当中读取然后再回写到缓存当中&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/06/rBpUXl917kWAR5f9AADQwVaxKPc592.png&quot; height=&quot;60%&quot; width=&quot;60%&quot;&gt;&lt;/div&gt;



&lt;h3 id=&quot;Read-Write-Through-读写穿透&quot;&gt;&lt;a href=&quot;#Read-Write-Through-读写穿透&quot; class=&quot;headerlink&quot; title=&quot;Read/Write Through(读写穿透)&quot;&gt;&lt;/a&gt;Read/Write Through(读写穿透)&lt;/h3&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>看完这篇文章，面试官再问你Template Method Pattern咱不怂他</title>
    <link href="https://www.waibizi.com/2021/01/16/%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E5%86%8D%E9%97%AE%E4%BD%A0Template%20Method%20Pattern%E5%92%B1%E4%B8%8D%E6%80%82%E4%BB%96/"/>
    <id>https://www.waibizi.com/2021/01/16/%E7%9C%8B%E5%AE%8C%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%AE%98%E5%86%8D%E9%97%AE%E4%BD%A0Template%20Method%20Pattern%E5%92%B1%E4%B8%8D%E6%80%82%E4%BB%96/</id>
    <published>2021-01-16T13:35:09.816Z</published>
    <updated>2021-01-16T13:53:07.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看完这篇文章，面试官再问你Template-Method-Pattern的时候咱不怂他"><a href="#看完这篇文章，面试官再问你Template-Method-Pattern的时候咱不怂他" class="headerlink" title="看完这篇文章，面试官再问你Template Method Pattern的时候咱不怂他"></a>看完这篇文章，面试官再问你Template Method Pattern的时候咱不怂他</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>Template Method Pattern（模板方法模式）：Define the skeleton of an algorithm in an operation,deferring some steps to<br>subclasses.Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.  定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义<br>该算法的某些特定步骤。）  </p><p>模板方法主要有两个角色：AbstractClass（抽象类）、 ConcreteClass（具体类）</p><p>其实模板方法在我们日常的生活中很是常见，无论是简历模板还是PPT模板，这些都是运用了这些思想，将一些通用的给抽象提取出来，简化我们的日常使用</p> <a id="more"></a><p>类图如下</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-ZCsWAfzwRAAFKtncWlZY919.jpg" height="50%" width="50%"></div><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2.代码实现"></a>2.代码实现</h2><div align="center">包结构</div><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-ZDk-AaDtFAAKZOrIEDKE260.jpg" height="50%" width="50%"></div><div align="center">抽象类</div><p>注意： 为了防止恶意的操作，一般模板方法都加上 final 关键字，不允许被覆写。  </p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-ZDpiAJJ_fAAhSoPPnhRA800.jpg" height="50%" width="50%"></div><div align="center">具体实现类A</div><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-ZDtaAQKipAAgttaz3Bsc911.jpg" height="50%" width="50%"></div><div align="center">具体实现类B</div><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-ZDxOALAOaAAf9YoPiVZw331.jpg" height="50%" width="50%"></div><div align="center">客户端</div><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-ZD0KAUQ2mAAhHnPTn0bA279.jpg" height="50%" width="50%"></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;看完这篇文章，面试官再问你Template-Method-Pattern的时候咱不怂他&quot;&gt;&lt;a href=&quot;#看完这篇文章，面试官再问你Template-Method-Pattern的时候咱不怂他&quot; class=&quot;headerlink&quot; title=&quot;看完这篇文章，面试官再问你Template Method Pattern的时候咱不怂他&quot;&gt;&lt;/a&gt;看完这篇文章，面试官再问你Template Method Pattern的时候咱不怂他&lt;/h1&gt;&lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h2&gt;&lt;p&gt;Template Method Pattern（模板方法模式）：Define the skeleton of an algorithm in an operation,deferring some steps to&lt;br&gt;subclasses.Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.  定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义&lt;br&gt;该算法的某些特定步骤。）  &lt;/p&gt;
&lt;p&gt;模板方法主要有两个角色：AbstractClass（抽象类）、 ConcreteClass（具体类）&lt;/p&gt;
&lt;p&gt;其实模板方法在我们日常的生活中很是常见，无论是简历模板还是PPT模板，这些都是运用了这些思想，将一些通用的给抽象提取出来，简化我们的日常使用&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer 59 - I. 滑动窗口的最大值</title>
    <link href="https://www.waibizi.com/2021/01/16/%E5%89%91%E6%8C%87%20Offer%2059%20-%20I.%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://www.waibizi.com/2021/01/16/%E5%89%91%E6%8C%87%20Offer%2059%20-%20I.%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2021-01-16T13:35:09.815Z</published>
    <updated>2021-01-16T13:53:17.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="剑指-Offer-59-I-滑动窗口的最大值"><a href="#剑指-Offer-59-I-滑动窗口的最大值" class="headerlink" title="剑指 Offer 59 - I. 滑动窗口的最大值"></a>剑指 Offer 59 - I. 滑动窗口的最大值</h1><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9Tt9iABsvUAAEZBgMxY0o775.png" height="100%" width="100%"></div><h2 id="2-题解"><a href="#2-题解" class="headerlink" title="2.题解"></a>2.题解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span> || k == <span class="number">0</span>) <span class="keyword">return</span> nums;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length-k+<span class="number">1</span>];</span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>,j = <span class="number">1</span> - k; i &lt; nums.length; i++,j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt; <span class="number">0</span> &amp;&amp; deque.peekFirst() == nums[j-<span class="number">1</span>])&#123;</span><br><span class="line">                deque.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 对不起，我的队列并不想存储比我当前遍历到的数组小的元素，所以你走吧 */</span></span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; deque.peekLast() &lt; nums[i])&#123;</span><br><span class="line">                deque.removeLast();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.addLast(nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                res[j] = deque.peekFirst();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><p>数据采用题目给的描述的数据</p><p>这是第一次进入循环的时候，滑动窗口与双端队列的情况</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9TuE-Ab8WlAABqgon3TmM413.png" height="50%" width="50%"></div><p>第二次进入循环的时候，因为isEmpty这个满足，如果会进行一次比较大小，看看是不是要移除已经在双端队列的元素，因为我们</p><p>需要保证这个双端队列的队头保存的是当前窗口的最大值。</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9TvB-AFAYjAACxVTBvnfM557.png" height="50%" width="50%"></div><p>第三次进入循环的时候，窗口已经形成了，我们需要拿到当前窗口的最大值，即我们保证队列当中的队头永远是当前窗口</p><p>的最大值，然后直接peekFirst即可</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9TvLCAA6CHAADU2BBj6-s276.png" height="50%" width="50%"></div><p>这一步就是我们如果形成了窗口，需要再次形成一个窗口的时候，我们应该判断当前的这个队头元素是不是上一个窗口的</p><p>第一个数，如果是，将其移出。</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9TvWqAEEeoAADRXKqwmzU338.png" height="50%" width="50%"></div><h2 id="3-科普滑动窗口"><a href="#3-科普滑动窗口" class="headerlink" title="3.科普滑动窗口"></a>3.科普滑动窗口</h2><p>之前面试被面试官搞了一下滑动窗口，在这里顺便总结一下</p><h3 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h3><p>流量控制就是让发送方慢点发送，要让接收方来得及接收</p><p>TCP就是利用滑动窗口机制来实现流量控制的</p><p>在通信过程中，接收方根据自己接收缓存的大小，动态调整发送方的发送窗口大小，即接收窗口rwnd（接收方设置确认报</p><p>文段的窗口大小来将rwnd通知通知给发送方），发送方的发送窗口取决于接收窗口rwnd和拥塞窗口cwnd的最小值。</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9TzF2AKmjSAAf9K5DNO3Y601.jpg" height="100%" width="100%"></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;剑指-Offer-59-I-滑动窗口的最大值&quot;&gt;&lt;a href=&quot;#剑指-Offer-59-I-滑动窗口的最大值&quot; class=&quot;headerlink&quot; title=&quot;剑指 Offer 59 - I. 滑动窗口的最大值&quot;&gt;&lt;/a&gt;剑指 Offer 59 - I. 滑动窗口的最大值&lt;/h1&gt;&lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/06/rBpUXl9Tt9iABsvUAAEZBgMxY0o775.png&quot; height=&quot;100%&quot; width=&quot;100%&quot;&gt;&lt;/div&gt;



&lt;h2 id=&quot;2-题解&quot;&gt;&lt;a href=&quot;#2-题解&quot; class=&quot;headerlink&quot; title=&quot;2.题解&quot;&gt;&lt;/a&gt;2.题解&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Solution&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] maxSlidingWindow(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] nums, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nums.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || k == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[nums.length-k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Deque&amp;lt;Integer&amp;gt; deque = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - k; i &amp;lt; nums.length; i++,j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (j &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; deque.peekFirst() == nums[j-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                deque.removeFirst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* 对不起，我的队列并不想存储比我当前遍历到的数组小的元素，所以你走吧 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!deque.isEmpty() &amp;amp;&amp;amp; deque.peekLast() &amp;lt; nums[i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                deque.removeLast();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            deque.addLast(nums[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                res[j] = deque.peekFirst();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>浅析go context！</title>
    <link href="https://www.waibizi.com/2021/01/16/%E6%B5%85%E6%9E%90go%20context%EF%BC%81/"/>
    <id>https://www.waibizi.com/2021/01/16/%E6%B5%85%E6%9E%90go%20context%EF%BC%81/</id>
    <published>2021-01-16T13:35:09.812Z</published>
    <updated>2021-01-16T13:48:21.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="看完这篇文章，直接往简历怼熟悉go-context吧！"><a href="#看完这篇文章，直接往简历怼熟悉go-context吧！" class="headerlink" title="看完这篇文章，直接往简历怼熟悉go context吧！"></a>看完这篇文章，直接往简历怼熟悉go context吧！</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>context我们通常翻译为上下文，一般理解为程序单元的一个运行状态、现场、快照，而翻译中上下又很好地诠释了其本质，上下上下则是存在上下层的传递，上会把内容传递给下。context在golang主要是用来设置截止时间、同步信号、传递请求相关值的结构体。在golang当中，我们刚刚提到程序单元也就是goroutine，那么我们context也跟goroutine牢牢地绑定在一起。</p> <a id="more"></a><h2 id="1-为什么需要context"><a href="#1-为什么需要context" class="headerlink" title="1.为什么需要context"></a>1.为什么需要context</h2><p>先来看看传统的做法吧</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// create a channel with cache</span></span><br><span class="line">   msg := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">   done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>)</span><br><span class="line">   <span class="comment">// consumer</span></span><br><span class="line">   <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">      ticker := time.NewTicker(<span class="number">1</span> * time.Second)</span><br><span class="line">      <span class="keyword">for</span> _ = <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">         <span class="keyword">select</span> &#123;</span><br><span class="line">         <span class="keyword">case</span> &lt;- done:</span><br><span class="line">            log.Println(<span class="string">"child goroutine interrupt!!!"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">         <span class="keyword">default</span>:</span><br><span class="line">            log.Println(<span class="string">"send message"</span>,&lt;- msg)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">      msg &lt;- i</span><br><span class="line">   &#125;</span><br><span class="line">   time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">   <span class="built_in">close</span>(done)</span><br><span class="line">   time.Sleep(<span class="number">1</span> * time.Second)</span><br><span class="line">   log.Println(<span class="string">"main goroutine exit"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们采用了channel+select的方式可以让main goroutine在某个时刻发送消息让child goroutine中断，但是这种通知方式是有限的，如果我们需要通知的方式不止这样，假设我们的需求是需要提交额外的信息来控制child goroutine中断，这时候就会显得channel+select的方式不大适合这种场景了。还有一种情况就是一个main goroutine当中有多个child goroutine，main goroutine需要对child goroutine有task timeout control。而child goroutine又还有自己child goroutine。</p><p>上述场景在我们的日常开发中还是蛮常见的，在HTTP/RPC服务当中，我们通常是采用的是拿一个goroutine去接受请求，然后再新建其他goroutine去处理具体的业务（有点类似Java的NIO吧）。但是当我们在一个上下文的环境当中，有时候某条goroutine失败了，而这条goroutine失败的时候，我们需要终止其他在同一个context下的goroutine，让系统及时回收goroutine。</p><p>那么接下来我们需要学习一种比较新的方式，就是context了</p><ul><li>上层的task取消后，下层的task都会被取消</li><li>中间某一层的task取消后，只会将当前task的下层task取消，而不会影响上层的task以及同级task。</li></ul><p>context是Go1.7 version新加入的一个标准库的接口，定义为Context类型；该接口定义了四个需要实现的方法，其中包括：</p><ul><li><p><code>Deadline</code>：返回的是context.Context被取消的时间，也就是完成task的截止日期</p></li><li><p><code>Done</code>：返回一个Channel，这个Channel会在当前工作完成或者上下文被取消后关闭，多次调用Done方法会返回同一个Channel</p></li><li><p><code>Err</code>：返回context.Context结束的原因，他只会在<code>Done</code>方法对应的Channel关闭时返回非空的值；</p><ul><li>如果context.Context被取消，会返回Canceled错误。</li><li>如果context.Context超时，会返回DeadlineExceeded错误。</li></ul></li><li><p><code>Value</code>：从context.Context当中获取键对应的值，对于同于同一个context而言，多次调用Value传入同样的key返回的结果是一样的。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line">    Deadline() (deadline time.Time, ok <span class="keyword">bool</span>)</span><br><span class="line">    Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    Err() error</span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-采用context改写一下上述例子"><a href="#2-采用context改写一下上述例子" class="headerlink" title="2.采用context改写一下上述例子"></a>2.采用context改写一下上述例子</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span>  &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;- ctx.Done():</span><br><span class="line">log.Println(<span class="string">"Task exit"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">log.Println(<span class="string">"Task running"</span>)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(ctx)</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">log.Println(<span class="string">"prepare to stop task"</span>)</span><br><span class="line">cancel()</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">log.Println(<span class="string">"main goroutine exit"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>功能上一样的</p><h2 id="3-context源码解析"><a href="#3-context源码解析" class="headerlink" title="3.context源码解析"></a>3.context源码解析</h2><p>先看一下context的总体结构吧，这里我们只分析部分源码先</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/07/rBpUXl_6tX6AQSmqAACsb3JwhtU622.png" height="50%" width="50%"></div><p><code>WithCancel</code>函数用来创建一个可取消的<code>context</code>，即<code>cancelCtx</code>类型的<code>context</code>。<code>WithCancel</code>返回一个<code>context</code>和一个<code>CancelFunc</code>，调用<code>CancelFunc</code>即可触发<code>cancel</code>操作。</p><p>我们简单看一下有关这个WithCancel的逻辑源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span> <span class="params">(ctx Context, cancel CancelFunc)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> parent == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"cannot create context from nil parent"</span>)</span><br><span class="line">&#125;</span><br><span class="line">c := newCancelCtx(parent)</span><br><span class="line">propagateCancel(parent, &amp;c)</span><br><span class="line"><span class="keyword">return</span> &amp;c, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c.cancel(<span class="literal">true</span>, Canceled) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// newCancelCtx returns an initialized cancelCtx.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCancelCtx</span><span class="params">(parent Context)</span> <span class="title">cancelCtx</span></span> &#123;</span><br><span class="line">    <span class="comment">// passing in current parent context and create new cancelCtx</span></span><br><span class="line"><span class="keyword">return</span> cancelCtx&#123;Context: parent&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// propagateCancel arranges for child to be canceled when parent is.</span></span><br><span class="line"><span class="comment">// pass down the cancellation relationship between the context nodes</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">propagateCancel</span><span class="params">(parent Context, child canceler)</span></span> &#123;</span><br><span class="line">done := parent.Done()</span><br><span class="line">    <span class="comment">// the parent node is empty</span></span><br><span class="line"><span class="keyword">if</span> done == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// parent is never canceled</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// find can be canceled node </span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="comment">// parent is already canceled</span></span><br><span class="line">        <span class="comment">// if parent node already canceled then the child node should be closed as well</span></span><br><span class="line">child.cancel(<span class="literal">false</span>, parent.Err())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> p, ok := parentCancelCtx(parent); ok &#123;</span><br><span class="line">p.mu.Lock()</span><br><span class="line"><span class="keyword">if</span> p.err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// parent has already been canceled</span></span><br><span class="line">child.cancel(<span class="literal">false</span>, p.err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// the parent node is not canceled</span></span><br><span class="line"><span class="keyword">if</span> p.children == <span class="literal">nil</span> &#123;</span><br><span class="line">p.children = <span class="built_in">make</span>(<span class="keyword">map</span>[canceler]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// hang the child node under the parent node</span></span><br><span class="line">p.children[child] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">p.mu.Unlock()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// if no cancel parent context is found. Start a new goroutine to parent or child node cancellation signals</span></span><br><span class="line">atomic.AddInt32(&amp;goroutines, +<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-parent.Done():</span><br><span class="line">child.cancel(<span class="literal">false</span>, parent.Err())</span><br><span class="line"><span class="keyword">case</span> &lt;-child.Done():</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的源码主要就是新建一个context，然后寻找是否有需要挂靠的父级context。这样的我们进行cancel的时候，这样就可以层层传递，将那么挂钩的子context一并取消了。</p><p>context.Background()源码：</p><p>可以简单看到这个方法只是一个对外的声明，具体还是得去看看background的源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Background</span><span class="params">()</span> <span class="title">Context</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> background</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">   background = <span class="built_in">new</span>(emptyCtx)</span><br><span class="line">   todo       = <span class="built_in">new</span>(emptyCtx)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>关于emptyCtx的源码还是蛮容易理解的，因为就是创建一个空的context罢了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> emptyCtx <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Deadline</span><span class="params">()</span> <span class="params">(deadline time.Time, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Done</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">struct</span></span>&#123;&#125; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Err</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*emptyCtx)</span> <span class="title">Value</span><span class="params">(key <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;看完这篇文章，直接往简历怼熟悉go-context吧！&quot;&gt;&lt;a href=&quot;#看完这篇文章，直接往简历怼熟悉go-context吧！&quot; class=&quot;headerlink&quot; title=&quot;看完这篇文章，直接往简历怼熟悉go context吧！&quot;&gt;&lt;/a&gt;看完这篇文章，直接往简历怼熟悉go context吧！&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;context我们通常翻译为上下文，一般理解为程序单元的一个运行状态、现场、快照，而翻译中上下又很好地诠释了其本质，上下上下则是存在上下层的传递，上会把内容传递给下。context在golang主要是用来设置截止时间、同步信号、传递请求相关值的结构体。在golang当中，我们刚刚提到程序单元也就是goroutine，那么我们context也跟goroutine牢牢地绑定在一起。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>技术只有在落地的那一瞬间才被赋予价值</title>
    <link href="https://www.waibizi.com/2021/01/16/%E6%8A%80%E6%9C%AF%E5%8F%AA%E6%9C%89%E5%9C%A8%E8%90%BD%E5%9C%B0%E7%9A%84%E9%82%A3%E4%B8%80%E7%9E%AC%E9%97%B4%E6%89%8D%E8%A2%AB%E8%B5%8B%E4%BA%88%E4%BB%B7%E5%80%BC/"/>
    <id>https://www.waibizi.com/2021/01/16/%E6%8A%80%E6%9C%AF%E5%8F%AA%E6%9C%89%E5%9C%A8%E8%90%BD%E5%9C%B0%E7%9A%84%E9%82%A3%E4%B8%80%E7%9E%AC%E9%97%B4%E6%89%8D%E8%A2%AB%E8%B5%8B%E4%BA%88%E4%BB%B7%E5%80%BC/</id>
    <published>2021-01-16T13:35:09.811Z</published>
    <updated>2021-01-16T13:53:33.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="技术只有在落地的那一瞬间才被赋予价值"><a href="#技术只有在落地的那一瞬间才被赋予价值" class="headerlink" title="技术只有在落地的那一瞬间才被赋予价值"></a>技术只有在落地的那一瞬间才被赋予价值</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>每一个程序员都追求着优秀的代码，然而在许多情况下，大多数程序员都有着自己“个性化”的“优秀准则”，虽然对于“什么是优秀的代码”我们并不会存在一个绝对的定义，但是一些优秀的代码显然会有一些让其他人阅读起来就感觉很舒服的感觉。</p><h2 id="2-谈谈代码质量"><a href="#2-谈谈代码质量" class="headerlink" title="2.谈谈代码质量"></a>2.谈谈代码质量</h2><p>优秀的代码主要有以下特点：</p><ol><li>容易理解；</li><li>没有明显的安全问题；</li><li>能够满足最关键的需求；</li><li>有充分的注释；</li><li>使用规范的命名；</li><li>经过充分的测试；</li></ol><p>我们认为不优秀的代码有如下特点:</p><ol><li>难以阅读的代码；</li><li>浪费大量计算机资源的代码；</li><li>.代码风格混乱的代码；</li><li>复杂的、不直观的代码；</li><li>没有经过适当测试的代码  </li></ol><p>我的面试官跟我谈过：一个需求你就算用再高深的代码技术去实现，如果阅读性差，可维护性差，还不如采用简单的方式，以一种可阅读的方式编写这段代码。</p><p>是的，开发不是你一个人单枪匹马，开发更要考虑的是team，优秀的代码我们可以理解是“经济”的代码，这里的经济指的是指的是使用较少的人力、物力、财力、时间、空间，来获取较大的成果或收益 。或者简单地说，投入少、收益大、投资回报高。  </p> <a id="more"></a><h2 id="3-代码质量与敏捷项目"><a href="#3-代码质量与敏捷项目" class="headerlink" title="3.代码质量与敏捷项目"></a>3.代码质量与敏捷项目</h2><p>对于软件的生命周期相信大家都是熟知的，是的，越完整的生命周期的确可以书写出优秀的代码，但是我们绝大多数情况下，项目都是敏捷性的，如果过分纠缠于这些代码指标，创始人的时间、投资人的金钱可能都没有办法得到最有效的使用。我以前对于代码指标是存在比较强迫的判断，在前些天与导师的讨论当中，导师提到了一句：技术只有在落地的那一瞬间才被赋予价值；也是本篇文章的标题，也正是这句话，让我重新思考了“什么才是真正优秀的代码”。</p><div align="center">【最适合当前现实环境的代码，才是最优秀的代码】</div><div align="center"><img src="https://www.waibizi.com/group1/M00/00/07/rBpUXl_LHxWAVuJVAAAngSVBHnQ787.png" height="50%" width="50%"></div><p>在此之前，我仍认为，敏捷是代码质量的扼杀者，但我现在认为“最适合当前现实环境的代码，才是最优秀的代码”，是的，敏捷与代码质量并无冲突，技术只有在落地的那一刻才被赋予价值。当我们考虑具体投入的时候，还要考虑我们所处的现实环境。 如果我们超出现实环境去讨论代码的质量，有时候会有失偏颇，丧失我们讨论代码质量的意义 。</p><h2 id="4-一些常见的编码规约"><a href="#4-一些常见的编码规约" class="headerlink" title="4.一些常见的编码规约"></a>4.一些常见的编码规约</h2><p>下面罗列一些常见的编码规约，可能部分与你长期遵守的编码规约有些许不同，但是这东西本来就不是一个绝对的标准，每个团队都有着适合自己团队的编码规约，仅供参考，若你有不同的意见，欢迎与我讨论</p><h3 id="1-驼峰命名法"><a href="#1-驼峰命名法" class="headerlink" title="1.驼峰命名法"></a>1.驼峰命名法</h3><p>驼峰命名法指的是使用大小写混合的格式，单词之间不使用空格隔开或者连接字符连接的命名方式。它有两种格式：大驼峰命名法（UpperCamelCase）和小驼峰命名法（lowerCamelCase）。 </p><p>大驼峰命名法的第一个单词以大写字母开始，其余的和小驼峰命名法相同。 比如：StudentInfo, TeacherInfo。  </p><p>小驼峰命名法的第一个单词以小写字母开始，其他单词以大写字母开始，其余字母使用小写字母。 比如：studentInfo, toString。  </p><h3 id="2-下划线命名法"><a href="#2-下划线命名法" class="headerlink" title="2.下划线命名法"></a>2.下划线命名法</h3><p>单词之间通过下划线“_”连接，比如“out_of_range”  </p><h3 id><a href="#" class="headerlink" title></a></h3><h3 id="Java命名规范"><a href="#Java命名规范" class="headerlink" title="Java命名规范"></a>Java命名规范</h3><table><thead><tr><th>标识符类型</th><th>适用命名方法</th><th>正确示例</th><th>错误示例</th></tr></thead><tbody><tr><td>package</td><td>适用名词，强制包名全部小写;不能使用连接符，使用单个单词作为包名</td><td>java.io<br>com.example.mypackage</td><td>com.waibizi.userManage<br>com.waibizi.my_package</td></tr><tr><td>class<br>interface</td><td>大驼峰命名法，使用名词或者名词短语，接口也可以使用形容词;避免使用缩略词</td><td>String<br>LinkedList</td><td>Runtimeexception<br>linkedList</td></tr><tr><td>方法</td><td>小驼峰命名法，通常使用动词或者动词短语，避免使用缩略词</td><td>Runnable.run()<br>String.getBytes()</td><td>String.GetBytes()<br>String.bytes()</td></tr><tr><td>变量</td><td>小驼峰命名法，避免使用单个字符的命名，例如a、b、c，命名应该具备意义,避免使用缩略词</td><td>String charsetName<br>Integer age</td><td>String c<br>String c1<br></td></tr><tr><td>常量</td><td>下划线命名法;使用大写字符</td><td>Integer MAX_VALUE = 65536</td><td>Integer max_value = 65536</td></tr></tbody></table><h3 id="3-可读性优先"><a href="#3-可读性优先" class="headerlink" title="3.可读性优先"></a>3.可读性优先</h3><p>上面Java命名规范多次提到避免使用缩略词便是存储可读性优先，命名的可读性需要注意以下几点</p><h4 id="1-可读性强的名字优先于简短的名字，尽量使用完整的词汇。"><a href="#1-可读性强的名字优先于简短的名字，尽量使用完整的词汇。" class="headerlink" title="1.可读性强的名字优先于简短的名字，尽量使用完整的词汇。"></a>1.可读性强的名字优先于简短的名字，尽量使用完整的词汇。</h4><h4 id="2-不要使用缩写、简写、缩略词，除非这些词语被广泛使用。"><a href="#2-不要使用缩写、简写、缩略词，除非这些词语被广泛使用。" class="headerlink" title="2.不要使用缩写、简写、缩略词，除非这些词语被广泛使用。"></a>2.不要使用缩写、简写、缩略词，除非这些词语被广泛使用。</h4><h4 id="3-不要使用太短的名字，除非是广泛接受的特例。"><a href="#3-不要使用太短的名字，除非是广泛接受的特例。" class="headerlink" title="3.不要使用太短的名字，除非是广泛接受的特例。"></a>3.不要使用太短的名字，除非是广泛接受的特例。</h4><h4 id="4-避免含糊、混淆或者误导。"><a href="#4-避免含糊、混淆或者误导。" class="headerlink" title="4.避免含糊、混淆或者误导。"></a>4.避免含糊、混淆或者误导。</h4><h3 id="4-tab键与空格键的相爱相杀"><a href="#4-tab键与空格键的相爱相杀" class="headerlink" title="4.tab键与空格键的相爱相杀"></a>4.tab键与空格键的相爱相杀</h3><p>无疑，这个东西是让广大程序员最具备争论的一点，就我目前的情况而已，我是用tab键都会选择格式化操作，即一个tab键是四个空格的大小这样去设置，在IDEA当中可以简单解决。</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/07/rBpUXl_LH5mAcj5oAAE0rjjNhy4593.jpg" height="50%" width="50%"></div><h3 id="5-代码换行原则"><a href="#5-代码换行原则" class="headerlink" title="5.代码换行原则"></a>5.代码换行原则</h3><p>1.每行代码字符数的限制。一般情况下，每行代码不要超出120个字符（当然有些规定是80个字符），主要看终端的宽度与屏幕的尺寸。</p><p>2.如果一行不足以容纳一个表达式，就需要换行 。</p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h2><p>今天的篇幅就到这为此啦，关于编码规范，可以参考【阿里巴巴开发手册】，当中罗列了许多的规范，但是我希望你能够从中整理出一份适合你自己团队的规约，因为最适合当前现实环境的代码，才是最优秀的代码。当然最后的最后，还要强调一下代码的【检查、评审、校验】真的很重要很重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;技术只有在落地的那一瞬间才被赋予价值&quot;&gt;&lt;a href=&quot;#技术只有在落地的那一瞬间才被赋予价值&quot; class=&quot;headerlink&quot; title=&quot;技术只有在落地的那一瞬间才被赋予价值&quot;&gt;&lt;/a&gt;技术只有在落地的那一瞬间才被赋予价值&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;每一个程序员都追求着优秀的代码，然而在许多情况下，大多数程序员都有着自己“个性化”的“优秀准则”，虽然对于“什么是优秀的代码”我们并不会存在一个绝对的定义，但是一些优秀的代码显然会有一些让其他人阅读起来就感觉很舒服的感觉。&lt;/p&gt;
&lt;h2 id=&quot;2-谈谈代码质量&quot;&gt;&lt;a href=&quot;#2-谈谈代码质量&quot; class=&quot;headerlink&quot; title=&quot;2.谈谈代码质量&quot;&gt;&lt;/a&gt;2.谈谈代码质量&lt;/h2&gt;&lt;p&gt;优秀的代码主要有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;容易理解；&lt;/li&gt;
&lt;li&gt;没有明显的安全问题；&lt;/li&gt;
&lt;li&gt;能够满足最关键的需求；&lt;/li&gt;
&lt;li&gt;有充分的注释；&lt;/li&gt;
&lt;li&gt;使用规范的命名；&lt;/li&gt;
&lt;li&gt;经过充分的测试；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们认为不优秀的代码有如下特点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;难以阅读的代码；&lt;/li&gt;
&lt;li&gt;浪费大量计算机资源的代码；&lt;/li&gt;
&lt;li&gt;.代码风格混乱的代码；&lt;/li&gt;
&lt;li&gt;复杂的、不直观的代码；&lt;/li&gt;
&lt;li&gt;没有经过适当测试的代码  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我的面试官跟我谈过：一个需求你就算用再高深的代码技术去实现，如果阅读性差，可维护性差，还不如采用简单的方式，以一种可阅读的方式编写这段代码。&lt;/p&gt;
&lt;p&gt;是的，开发不是你一个人单枪匹马，开发更要考虑的是team，优秀的代码我们可以理解是“经济”的代码，这里的经济指的是指的是使用较少的人力、物力、财力、时间、空间，来获取较大的成果或收益 。或者简单地说，投入少、收益大、投资回报高。  &lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>端点网络科技编程题</title>
    <link href="https://www.waibizi.com/2021/01/16/%E7%AB%AF%E7%82%B9%E7%BD%91%E7%BB%9C%E7%A7%91%E6%8A%80%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    <id>https://www.waibizi.com/2021/01/16/%E7%AB%AF%E7%82%B9%E7%BD%91%E7%BB%9C%E7%A7%91%E6%8A%80%E7%BC%96%E7%A8%8B%E9%A2%98/</id>
    <published>2021-01-16T13:35:09.801Z</published>
    <updated>2021-01-16T13:54:20.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="端点网络科技的一道编程题"><a href="#端点网络科技的一道编程题" class="headerlink" title="端点网络科技的一道编程题"></a>端点网络科技的一道编程题</h1><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><div align="center"><img src="https://www.waibizi.com/group1/M00/00/05/rBpUXl9Q_ceAOK8tAADJdEWwFu4860.png" height="50%" width="50%"></div><h2 id="2-暴力解题"><a href="#2-暴力解题" class="headerlink" title="2.暴力解题"></a>2.暴力解题</h2><p>字母异位词分组就是字符串异构，例如eat跟tea这两个单词，他们的字母不变，重新组合了而已，我们就是找出字母不变</p><p>的但是结构变化的字符串，把他们凑在一起；</p> <a id="more"></a><p>暴力的想法肯定是，两次循环，第一次循环拿着一次去遍历匹配全数组减去第一次循环过的。</p><p>简单来个图示吧，朴素算法挺好理解</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9RAMeAX0wyAAByb6kChrs910.png" height="80%" width="80%"></div><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9RAReAPM2hAABXObDOUZM298.png" height="80%" width="80%"></div><p>其实这个算法我们可以稍微优化优化，各位可以想想如果第二个循环匹配到的异构字符串已经匹配到了，在第一次循环的</p><p>时候，我们没有必要再拿着这个字符串往下匹配了，直接看图吧！！</p><p>绿色就是第一次循环匹配到的</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9RAnaACvzgAABtFDtXrJM643.png" height="50%" width="50%"></div><p>红色表示的是第二次循环我们可以跳过的</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9RAq-AT864AABUeG2KFUg394.png" height="50%" width="50%"></div><p>OK那么匹配的思路我们懂了，那么怎么进行匹配比较呢？</p><p>这里我们借助HashMap的containsKey，将每个数组内的字符串中的字符出现的次数记录下来，如果与之匹配的字符串当</p><p>中的字符出现次数一致，表示两个字符串是异构字符串。</p><p>完整代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs)&#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[strs.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++)&#123;</span><br><span class="line">            List&lt;String&gt; cache = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(!flag[i])&#123;</span><br><span class="line">                cache = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                cache.add(strs[i]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; strs.length; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(judge(strs[i],strs[j]))&#123;</span><br><span class="line">                        flag[j] = <span class="keyword">true</span>;</span><br><span class="line">                        cache.add(strs[j]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cache!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                Collections.reverse(cache);</span><br><span class="line">                result.add(cache);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     如果这两个是异构的话，我们就返回true</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(String argsA,String argsB)</span></span>&#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;argsA.length(); i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(argsA.charAt(i)))&#123;</span><br><span class="line">                map.put(argsA.charAt(i),map.get(argsA.charAt(i))+<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(argsA.charAt(i),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;argsB.length(); i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(argsB.charAt(i)))&#123;</span><br><span class="line">                map.put(argsB.charAt(i),map.get(argsB.charAt(i))-<span class="number">1</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Character&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c: set)&#123;</span><br><span class="line">            <span class="keyword">if</span>((map.get(c))!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一看代码这么多的for，时间复杂度肯定不会低（其实你拿去leetcode交的话是会超时的）</p><h2 id="3-利用质数解题"><a href="#3-利用质数解题" class="headerlink" title="3.利用质数解题"></a>3.利用质数解题</h2><p>质数解题的思路其实就是我们的英文字母有26个，我们只需要找出26个质数，因为不同的质数之间相乘不会有结果冲突，</p><p>我们可以利用此特性来解题。</p><p>解题第一步，先搞出来26个质数</p><p>2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103</p><p>这个质数我们存为数组，利用ASCII码的特性，就是 a - a = 0，即 tea 对应的质数分别是 73 11 2 然后tea这几个字母对应的质数相乘，我们就把这个相乘的结果作为这三个字母的代表。</p><p>例如    tea    与 eat  都是 1606。</p><p>代码如下，key采用long的原因是，如果一个数组内的字符串过多的情况下，会有数据溢出的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">        HashMap&lt;Long,List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">/* 这个是26个质数，英文有26个字母 */</span></span><br><span class="line">        <span class="keyword">int</span>[] prime = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>, <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strs.length; i++)&#123;</span><br><span class="line">            <span class="keyword">long</span> key = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; strs[i].length(); j++)&#123;</span><br><span class="line">                <span class="comment">/* 每个字符串数组的每个单个字符减去首字母（ASCII码） */</span></span><br><span class="line">                key *= prime[strs[i].charAt(j)-<span class="string">'a'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(key))&#123;</span><br><span class="line">                map.get(key).add(strs[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                list.add(strs[i]);</span><br><span class="line">                map.put(key,list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;(map.values());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;端点网络科技的一道编程题&quot;&gt;&lt;a href=&quot;#端点网络科技的一道编程题&quot; class=&quot;headerlink&quot; title=&quot;端点网络科技的一道编程题&quot;&gt;&lt;/a&gt;端点网络科技的一道编程题&lt;/h1&gt;&lt;h2 id=&quot;1-题目描述&quot;&gt;&lt;a href=&quot;#1-题目描述&quot; class=&quot;headerlink&quot; title=&quot;1.题目描述&quot;&gt;&lt;/a&gt;1.题目描述&lt;/h2&gt;&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/05/rBpUXl9Q_ceAOK8tAADJdEWwFu4860.png&quot; height=&quot;50%&quot; width=&quot;50%&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-暴力解题&quot;&gt;&lt;a href=&quot;#2-暴力解题&quot; class=&quot;headerlink&quot; title=&quot;2.暴力解题&quot;&gt;&lt;/a&gt;2.暴力解题&lt;/h2&gt;&lt;p&gt;字母异位词分组就是字符串异构，例如eat跟tea这两个单词，他们的字母不变，重新组合了而已，我们就是找出字母不变&lt;/p&gt;
&lt;p&gt;的但是结构变化的字符串，把他们凑在一起；&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>单点登录就是这么简单</title>
    <link href="https://www.waibizi.com/2021/01/16/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/"/>
    <id>https://www.waibizi.com/2021/01/16/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E5%B0%B1%E6%98%AF%E8%BF%99%E4%B9%88%E7%AE%80%E5%8D%95/</id>
    <published>2021-01-16T13:35:09.799Z</published>
    <updated>2021-01-16T13:54:27.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单点登录就是这么简单"><a href="#单点登录就是这么简单" class="headerlink" title="单点登录就是这么简单"></a>单点登录就是这么简单</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>单点登录的全称是Single Sign On，随着公司的产品日益增多，每一个系统都做登录功能显然不现实，而单点登录可以做到多系统只使用一次登录。</p><p>单点登录的原理就是让用户拿着一个令牌，所有的系统都可以检验到这个令牌是否有效。而在不同的系统跳转的时候，这个令牌也会自动携带，这个涉及到二级域名cookie共享，有兴趣的自行了解。</p><h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h2><p>前言提到我们所有的系统都可以检验到这个令牌是否有效，这里我采用redis来做分布式共享。</p><p>为了演示的方便，演示代码不涉及到DB操作，直接在配置文件声明一个用户</p><p>既然我们说我们校验的叫“令牌”，那么这个令牌必须就是唯一的，所以我们可以采用UUID</p><p>先看下包结构</p> <a id="more"></a><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-4uyCAW7j2AAXQeo9kIlM694.jpg" height="50%" width="50%"></div><p>实现代码比较简单，我截图关键代码讲，相关代码实现会上传到github上，微信公众号后台回复sso-demo即可</p><p>用户信息类</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-4s5KAGtZhAAKBgLq20Ao921.jpg" height="50%" width="50%"></div><p>直接读取的是配置文件配置信息</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-4s9yAb0UuAAfBXDt-4pk865.jpg" height="50%" width="50%"></div><p>由于redis持久化序列化的需要，这里对于redis重新配置</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-4tQmANTzEAAvaC7xQuts764.jpg" height="50%" width="50%"></div><p>登录的时候，我们将一个UUID作为key，用户信息作为value存储到redis当中，返回给登录方的只有的token（令牌），用户如果需要获取自身的信息，需带着token到后端。这意味着我们需要一个拦截器，拦截是否存在token，token是否真实有效</p><p>拦截器配置</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-4u_KAA1_uAAXmkx_u-PQ225.jpg" height="50%" width="50%"></div><p>令牌拦截器</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-4vC6AKyN0AAkfBEdKtxM833.jpg" height="50%" width="50%"></div><p>用户的服务类</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-4vJOAEcZ6AA1bUwfFzLo941.jpg" height="50%" width="50%"></div><h2 id="3-UUID碰撞"><a href="#3-UUID碰撞" class="headerlink" title="3.UUID碰撞"></a>3.UUID碰撞</h2><p>UUID单体情况下，确实没问题了，但是如果我们的SSO集群部署，就会出现UUID碰撞的情况，也就是生成的UUID相同，这是我们可以采用推特的雪花算法来替换。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单点登录就是这么简单&quot;&gt;&lt;a href=&quot;#单点登录就是这么简单&quot; class=&quot;headerlink&quot; title=&quot;单点登录就是这么简单&quot;&gt;&lt;/a&gt;单点登录就是这么简单&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;单点登录的全称是Single Sign On，随着公司的产品日益增多，每一个系统都做登录功能显然不现实，而单点登录可以做到多系统只使用一次登录。&lt;/p&gt;
&lt;p&gt;单点登录的原理就是让用户拿着一个令牌，所有的系统都可以检验到这个令牌是否有效。而在不同的系统跳转的时候，这个令牌也会自动携带，这个涉及到二级域名cookie共享，有兴趣的自行了解。&lt;/p&gt;
&lt;h2 id=&quot;2-实现&quot;&gt;&lt;a href=&quot;#2-实现&quot; class=&quot;headerlink&quot; title=&quot;2.实现&quot;&gt;&lt;/a&gt;2.实现&lt;/h2&gt;&lt;p&gt;前言提到我们所有的系统都可以检验到这个令牌是否有效，这里我采用redis来做分布式共享。&lt;/p&gt;
&lt;p&gt;为了演示的方便，演示代码不涉及到DB操作，直接在配置文件声明一个用户&lt;/p&gt;
&lt;p&gt;既然我们说我们校验的叫“令牌”，那么这个令牌必须就是唯一的，所以我们可以采用UUID&lt;/p&gt;
&lt;p&gt;先看下包结构&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring定时、cron表达式详解</title>
    <link href="https://www.waibizi.com/2021/01/16/Spring%E5%AE%9A%E6%97%B6%E3%80%81cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.waibizi.com/2021/01/16/Spring%E5%AE%9A%E6%97%B6%E3%80%81cron%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-01-16T13:35:09.790Z</published>
    <updated>2021-01-16T13:54:53.599Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring定时、cron表达式详解"><a href="#Spring定时、cron表达式详解" class="headerlink" title="Spring定时、cron表达式详解"></a>Spring定时、cron表达式详解</h1><h2 id="1-最简单的定时任务"><a href="#1-最简单的定时任务" class="headerlink" title="1.最简单的定时任务"></a>1.最简单的定时任务</h2><p>下面代码会定时一秒打印一次，只需要加两个注解，一个是开启定时任务的注解，一个是设定定时任务的执行频率（单位是毫秒）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(QuartzApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"歪鼻子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="2-cron表达式"><a href="#2-cron表达式" class="headerlink" title="2.cron表达式"></a>2.cron表达式</h2><p>我们发现上面的定时任务只会按照一定的频率去执行，但是我们的需求往往没有那么简单，这个时候我们需要借助cron表达式，这个的历史我就不介绍了。</p><p>cron表达式一共有七位（用空格区分），在Spring当中只支持六位，也就不支持年份。</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-xG7eAfxOwAAOeN4L8Tf8879.png" height="50%" width="50%"></div><p>在上表当中，我们看到有一行是符号，我们接下来先了解符号的作用</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-xIUyAG8RQAALDf7-HBjY575.jpg" height="50%" width="50%"></div><p>看下图的时候先看最后一句</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-xPPWATg1DAAQ5WGMP9sI096.jpg" height="50%" width="50%"></div><h3 id="尝试运用"><a href="#尝试运用" class="headerlink" title="尝试运用"></a>尝试运用</h3><p>结合上面的表格理解这里的cron表达式，注解里面的属性使用cron</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(QuartzApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每天的1点到4点，在零分开始触发一次后，每隔三十分钟触发一次定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 0/30 1-4 * * ?"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"歪鼻子"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-异步多线程配合定时任务"><a href="#3-异步多线程配合定时任务" class="headerlink" title="3.异步多线程配合定时任务"></a>3.异步多线程配合定时任务</h2><p>定时任务默认是采用单线程的，而如果任务持续时间比较长，会影响后续的定时任务，可能导致任务的丢失，所以我们一般使用定时任务的时候，都会配合多线程进行异步执行。</p><p>我们只需要两个注解就可以实现异步线程的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(QuartzApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"歪鼻子A"</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">4</span>*<span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"歪鼻子B"</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-定时任务的生产使用"><a href="#4-定时任务的生产使用" class="headerlink" title="4.定时任务的生产使用"></a>4.定时任务的生产使用</h2><p>在前面的线程池一文中提到，如果使用多个线程的情况下，我们都是配置线程池进行使用的（即池化思想）</p><p>工程结构</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-xSTSAAAmGAAE2WBkC3fY104.jpg" height="50%" width="50%"></div><p>TaskConfig.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskConfig</span> <span class="keyword">implements</span> <span class="title">AsyncConfigurer</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"shutdown"</span>, name = <span class="string">"taskExecutor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">asyncExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> coreSize = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">// IO密集型的核心线程数一般是CPU核数的两倍</span></span><br><span class="line">        executor.setCorePoolSize(coreSize);</span><br><span class="line">        <span class="comment">// 最大线程数一般是核心线程数的两倍</span></span><br><span class="line">        executor.setMaxPoolSize(coreSize*<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 等待的时间，因为不能无限的等待下去</span></span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">8000</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">"taskExecutor-"</span>);</span><br><span class="line">        <span class="comment">// 表明等待所有线程执行完才关闭线程池</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 设置拒绝策略</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">6000</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">20</span>);</span><br><span class="line">        executor.initialize();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">getAsyncExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> asyncExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>QuartzApplication.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(QuartzApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Async</span>(<span class="string">"taskExecutor"</span>)</span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncEvent</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"歪鼻子"</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring定时、cron表达式详解&quot;&gt;&lt;a href=&quot;#Spring定时、cron表达式详解&quot; class=&quot;headerlink&quot; title=&quot;Spring定时、cron表达式详解&quot;&gt;&lt;/a&gt;Spring定时、cron表达式详解&lt;/h1&gt;&lt;h2 id=&quot;1-最简单的定时任务&quot;&gt;&lt;a href=&quot;#1-最简单的定时任务&quot; class=&quot;headerlink&quot; title=&quot;1.最简单的定时任务&quot;&gt;&lt;/a&gt;1.最简单的定时任务&lt;/h2&gt;&lt;p&gt;下面代码会定时一秒打印一次，只需要加两个注解，一个是开启定时任务的注解，一个是设定定时任务的执行频率（单位是毫秒）。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@EnableScheduling&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@SpringBootApplication&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QuartzApplication&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SpringApplication.run(QuartzApplication&lt;span class=&quot;class&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;args&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Scheduled&lt;/span&gt;(fixedRate = &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;歪鼻子&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring的切面编程与自定义注解，谁用谁觉得爽</title>
    <link href="https://www.waibizi.com/2021/01/16/Spring%E7%9A%84%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%EF%BC%8C%E8%B0%81%E7%94%A8%E8%B0%81%E8%A7%89%E5%BE%97%E7%88%BD/"/>
    <id>https://www.waibizi.com/2021/01/16/Spring%E7%9A%84%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%EF%BC%8C%E8%B0%81%E7%94%A8%E8%B0%81%E8%A7%89%E5%BE%97%E7%88%BD/</id>
    <published>2021-01-16T13:35:09.788Z</published>
    <updated>2021-01-16T13:55:06.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring的切面编程与自定义注解，谁用谁觉得爽"><a href="#Spring的切面编程与自定义注解，谁用谁觉得爽" class="headerlink" title="Spring的切面编程与自定义注解，谁用谁觉得爽"></a>Spring的切面编程与自定义注解，谁用谁觉得爽</h1><h2 id="1-元注解"><a href="#1-元注解" class="headerlink" title="1.元注解"></a>1.元注解</h2><p>JDK从1.5开始对于注解（Annotation）开启了支持。这里不对注解进一步的解释含义。Java如果要实现自定义注解，首先要了解到的是元注解，元注解有以下四个。</p><p>@Target</p><p>用来描述注解使用的范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE, <span class="comment">// 类、接口、枚举类</span></span><br><span class="line"> </span><br><span class="line">FIELD, <span class="comment">// 成员变量（包括：枚举常量）</span></span><br><span class="line"> </span><br><span class="line">METHOD, <span class="comment">// 成员方法</span></span><br><span class="line"> </span><br><span class="line">PARAMETER, <span class="comment">// 方法参数</span></span><br><span class="line"> </span><br><span class="line">CONSTRUCTOR, <span class="comment">// 构造方法</span></span><br><span class="line"> </span><br><span class="line">LOCAL_VARIABLE, <span class="comment">// 局部变量</span></span><br><span class="line"> </span><br><span class="line">ANNOTATION_TYPE, <span class="comment">// 注解类</span></span><br><span class="line"> </span><br><span class="line">PACKAGE, <span class="comment">// 可用于修饰：包</span></span><br><span class="line"> </span><br><span class="line">TYPE_PARAMETER, <span class="comment">// 类型参数，JDK 1.8 新增</span></span><br><span class="line"> </span><br><span class="line">TYPE_USE <span class="comment">// 使用类型的任何地方，JDK 1.8 新增</span></span><br></pre></td></tr></table></figure> <a id="more"></a><p>@Retention</p><p>@Documented</p><p>@Inherited</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Spring的切面编程与自定义注解，谁用谁觉得爽&quot;&gt;&lt;a href=&quot;#Spring的切面编程与自定义注解，谁用谁觉得爽&quot; class=&quot;headerlink&quot; title=&quot;Spring的切面编程与自定义注解，谁用谁觉得爽&quot;&gt;&lt;/a&gt;Spring的切面编程与自定义注解，谁用谁觉得爽&lt;/h1&gt;&lt;h2 id=&quot;1-元注解&quot;&gt;&lt;a href=&quot;#1-元注解&quot; class=&quot;headerlink&quot; title=&quot;1.元注解&quot;&gt;&lt;/a&gt;1.元注解&lt;/h2&gt;&lt;p&gt;JDK从1.5开始对于注解（Annotation）开启了支持。这里不对注解进一步的解释含义。Java如果要实现自定义注解，首先要了解到的是元注解，元注解有以下四个。&lt;/p&gt;
&lt;p&gt;@Target&lt;/p&gt;
&lt;p&gt;用来描述注解使用的范围&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;TYPE, &lt;span class=&quot;comment&quot;&gt;// 类、接口、枚举类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FIELD, &lt;span class=&quot;comment&quot;&gt;// 成员变量（包括：枚举常量）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;METHOD, &lt;span class=&quot;comment&quot;&gt;// 成员方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PARAMETER, &lt;span class=&quot;comment&quot;&gt;// 方法参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONSTRUCTOR, &lt;span class=&quot;comment&quot;&gt;// 构造方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LOCAL_VARIABLE, &lt;span class=&quot;comment&quot;&gt;// 局部变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ANNOTATION_TYPE, &lt;span class=&quot;comment&quot;&gt;// 注解类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PACKAGE, &lt;span class=&quot;comment&quot;&gt;// 可用于修饰：包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TYPE_PARAMETER, &lt;span class=&quot;comment&quot;&gt;// 类型参数，JDK 1.8 新增&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;TYPE_USE &lt;span class=&quot;comment&quot;&gt;// 使用类型的任何地方，JDK 1.8 新增&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SpringBoot+JWT实现无权限SSO单点登录系统</title>
    <link href="https://www.waibizi.com/2021/01/16/SpringBoot+JWT%E5%AE%9E%E7%8E%B0%E6%97%A0%E6%9D%83%E9%99%90SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.waibizi.com/2021/01/16/SpringBoot+JWT%E5%AE%9E%E7%8E%B0%E6%97%A0%E6%9D%83%E9%99%90SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-01-16T13:35:09.786Z</published>
    <updated>2021-01-16T13:55:14.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-JWT实现无权限SSO单点登录系统"><a href="#SpringBoot-JWT实现无权限SSO单点登录系统" class="headerlink" title="SpringBoot+JWT实现无权限SSO单点登录系统"></a>SpringBoot+JWT实现无权限SSO单点登录系统</h1><h2 id="1-什么是SSO"><a href="#1-什么是SSO" class="headerlink" title="1.什么是SSO"></a>1.什么是SSO</h2><p>SSO系统现在特别常见，拿阿里的天猫与淘宝举例来说，你在天猫选择登录的话，你再访问淘宝的网站的话，你会发</p><p>现你不用登录了（注意两者的域名并不是完全一致的，这是两套系统）</p><p>SSO 的全称是Single Sign On，翻译过来就是单点登录，单点登录的流程如下</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl9XPoiAGscuAAIV5ZT-wCY706.jpg" height="80%" width="80%"></div> <a id="more"></a><h2 id="2-什么是JWT"><a href="#2-什么是JWT" class="headerlink" title="2.什么是JWT"></a>2.什么是JWT</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot-JWT实现无权限SSO单点登录系统&quot;&gt;&lt;a href=&quot;#SpringBoot-JWT实现无权限SSO单点登录系统&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot+JWT实现无权限SSO单点登录系统&quot;&gt;&lt;/a&gt;SpringBoot+JWT实现无权限SSO单点登录系统&lt;/h1&gt;&lt;h2 id=&quot;1-什么是SSO&quot;&gt;&lt;a href=&quot;#1-什么是SSO&quot; class=&quot;headerlink&quot; title=&quot;1.什么是SSO&quot;&gt;&lt;/a&gt;1.什么是SSO&lt;/h2&gt;&lt;p&gt;SSO系统现在特别常见，拿阿里的天猫与淘宝举例来说，你在天猫选择登录的话，你再访问淘宝的网站的话，你会发&lt;/p&gt;
&lt;p&gt;现你不用登录了（注意两者的域名并不是完全一致的，这是两套系统）&lt;/p&gt;
&lt;p&gt;SSO 的全称是Single Sign On，翻译过来就是单点登录，单点登录的流程如下&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.waibizi.com/group1/M00/00/06/rBpUXl9XPoiAGscuAAIV5ZT-wCY706.jpg&quot; height=&quot;80%&quot; width=&quot;80%&quot;&gt;&lt;/div&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>RocketMQ最佳实践</title>
    <link href="https://www.waibizi.com/2021/01/16/RocketMQ%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>https://www.waibizi.com/2021/01/16/RocketMQ%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</id>
    <published>2021-01-16T13:35:09.784Z</published>
    <updated>2021-01-16T13:55:22.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RocketMQ最佳实践"><a href="#RocketMQ最佳实践" class="headerlink" title="RocketMQ最佳实践"></a>RocketMQ最佳实践</h1><h2 id="1-Producer最佳实践"><a href="#1-Producer最佳实践" class="headerlink" title="1.Producer最佳实践"></a>1.Producer最佳实践</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【1】一个应用尽可能用一个Topoc，消息子类型用tags来标识，tags可以由应用自由设置</span><br></pre></td></tr></table></figure><p>只有发送消息设置了tags，消费方在订阅消息时，才可以利用tags在broker做消息过滤</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【2】每个消息在业务层面的唯一标识码，要设置到keys字段，方便将来定位消息丢失问题</span><br></pre></td></tr></table></figure><p>服务器会为每个消息创建索引（哈希索引），应用可以通过topic，key来查询这条消息内容，以及消息被谁消费</p><p>由于是哈希索引，请务必保证key尽可能唯一，这样可以避免潜在的哈希冲突</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【3】如有可靠性需要，消费发送成功或者失败，要打印消息日志（sendresult和key信息）</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【4】如果相同性质的消息量大，使用批量消息，可以提升性能</span><br></pre></td></tr></table></figure> <a id="more"></a><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【5】建议消息大小不超过512KB</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【6】send(msg)会阻塞,如果有性能要求，可以使用异步的方式:send(msg,callback)</span><br></pre></td></tr></table></figure><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【7】如果在一个JVM中，有多个生产者进行大数据处理，建议：</span><br></pre></td></tr></table></figure><ul><li>少数生产者使用异步发送方式(3~5个就够了)</li><li>通过setInstanceName方法，给每一个生产者设置一个实例名</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【8】send消息方法，只要不抛出异常，就代表发送成功。但是发送成功会有多个状态，在sendResult里定义</span><br></pre></td></tr></table></figure><ul><li>SEND_OK：消息发送成功</li><li>FLUSH_DISK_TIMEOUT：消息发送成功，但是服务器刷盘超时，消息已经进入服务器队列，只有此时服务器宕机，消息才会丢失</li><li>FLUSH_SLAVE_TIMEOUT：消息发送成功，但是服务器同步到Slave时超时，消息已经进入服务器队列，只有此时服务宕机，消息才会丢失</li><li>SLAVE_NOT_AVAILABLE：消息发送成功，但是此时Slave不可用，消息已经进入服务器队列，只有此时服务器宕机，消息才会丢失</li><li>如果状态是（FLUSH_DISK_TIMEOUT）或（FLUSH_SLAVE_TIMEOUT），并且Broker正好关闭，此时，可以选择丢弃这条消息，或者重发。但建议最好是重发，有消费者主动去重</li><li>Producer向Broker发送请求会等待响应，但如果达到最大等待时间，未得到响应，则客户端将抛出RemotingTimeoutException，默认的等待时间是3秒，如果使用send(msg,timeout)，则可以自己设定超时时间，但是超时时间不能设置太小，因为Broker需要一些时间来刷新磁盘或与从属设备同步，如果该值超过syncFlushTimeout，则该值可能影响不大，因为Broker可能会在超时之前返回FLUSH_SLAVE_TIMEOUT或FLUSH_SLAVE_TIMEOUT的响应</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">【9】对于消息不可丢失应用，务必要有消息重发机制</span><br></pre></td></tr></table></figure><p>Producer的send方法本身支持内部重试：</p><ul><li>至多重试3次</li><li>如果发送失败，则轮到下一个Broker</li><li>这个方法的总耗时时间不超过sendMsgTimeout设置的值，默认为10s。所以，如果本身向broker发送消息超时异常，都不会再做重试</li></ul><p>以上策略仍然不能保证消息一定发送成功，为保证消息一定成功，建议将消息存储到db当中，由后台线程定时重试，保证消息一定到达Broker</p><h2 id="2-Consumer最佳实践"><a href="#2-Consumer最佳实践" class="headerlink" title="2.Consumer最佳实践"></a>2.Consumer最佳实践</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RocketMQ最佳实践&quot;&gt;&lt;a href=&quot;#RocketMQ最佳实践&quot; class=&quot;headerlink&quot; title=&quot;RocketMQ最佳实践&quot;&gt;&lt;/a&gt;RocketMQ最佳实践&lt;/h1&gt;&lt;h2 id=&quot;1-Producer最佳实践&quot;&gt;&lt;a href=&quot;#1-Producer最佳实践&quot; class=&quot;headerlink&quot; title=&quot;1.Producer最佳实践&quot;&gt;&lt;/a&gt;1.Producer最佳实践&lt;/h2&gt;&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;【1】一个应用尽可能用一个Topoc，消息子类型用tags来标识，tags可以由应用自由设置&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;只有发送消息设置了tags，消费方在订阅消息时，才可以利用tags在broker做消息过滤&lt;/p&gt;
&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;【2】每个消息在业务层面的唯一标识码，要设置到keys字段，方便将来定位消息丢失问题&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;服务器会为每个消息创建索引（哈希索引），应用可以通过topic，key来查询这条消息内容，以及消息被谁消费&lt;/p&gt;
&lt;p&gt;由于是哈希索引，请务必保证key尽可能唯一，这样可以避免潜在的哈希冲突&lt;/p&gt;
&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;【3】如有可靠性需要，消费发送成功或者失败，要打印消息日志（sendresult和key信息）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;figure class=&quot;highlight tex&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;【4】如果相同性质的消息量大，使用批量消息，可以提升性能&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>RequestContextHolder持有上下文的Request容器详解</title>
    <link href="https://www.waibizi.com/2021/01/16/RequestContextHolder%E6%8C%81%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84Request%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.waibizi.com/2021/01/16/RequestContextHolder%E6%8C%81%E6%9C%89%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84Request%E5%AE%B9%E5%99%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-01-16T13:35:09.783Z</published>
    <updated>2021-01-16T13:48:43.928Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RequestContextHolder持有上下文的Request容器详解"><a href="#RequestContextHolder持有上下文的Request容器详解" class="headerlink" title="RequestContextHolder持有上下文的Request容器详解"></a>RequestContextHolder持有上下文的Request容器详解</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>最近开发的时候，看到一些代码是从controller传递到service的，觉得这种解决方案不优雅，于是各种翻资料，终于翻到一个可以不从controller传递至service的。</p><p>SpringMVC当中已经提供了Request容器的持有者类，我们无论是在service甚至是在dao层，都可以获取到当前请求的request，那么我们先来了解一下这个的用法，然后再来看源码吧！</p> <a id="more"></a><h2 id="2-RequestContextHolder使用"><a href="#2-RequestContextHolder使用" class="headerlink" title="2.RequestContextHolder使用"></a>2.RequestContextHolder使用</h2><p>包结构</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-44OOAFNffAALnnkB2brg235.png" height="50%" width="50%"></div><p>在service层当中运用</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-44KiAevLQAAUnH6jSBwk201.png" height="50%" width="50%"></div><p>controller调用</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-44RKAR2xhAAJ8dsYi7HE797.png" height="50%" width="50%"></div><p>测试request是否可用</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-44UyADqz1AABzxwL75lE521.png" height="50%" width="50%"></div><h2 id="3-源码分析"><a href="#3-源码分析" class="headerlink" title="3.源码分析"></a>3.源码分析</h2><p>既然我们是从    RequestContextHolder.getRequestAttributes()    当中获取的，我们首先看一下这个方法的源码</p><p>getRequestAttributes()方法中我们看到返回的是attributes，并且是从requestAttributesHolder当中进行get到的</p><p>PS：方法上面的注释大致意思就是获取当前线程绑定的RequestAttributes</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-44jGAVxQEAAZ3RnL9Hik179.png" height="50%" width="50%"></div><p>我们接下来去看requestAttributesHolder，可以看到这是一个线程变量</p><p>也就是保证当前线程取到的都是自己线程的requestAttributesHolder</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-44tmABoh_AAGogJUgZGw530.png" height="50%" width="50%"></div><p>看完了如果获取，我们不免得好奇这个requestAttributesHolder是在什么时候被set进去的</p><p>定位到setRequestAttributes方法，方法上面的大概注释就是将给定的RequestAttributes绑定的当前的线程，并且可以指定是否可继承（默认是不可继承）</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-448CAK-XlAA1hbjNzyzE830.png" height="50%" width="50%"></div><p>那么又是谁调用了这个setRequestAttributes方法呢</p><p>这时我们得定位到另外一个类中的方法了，坐标：org.springframework.web.filter.RequestContextFilter.initContextHolders()</p><p>这个类是我们的请求上下文过滤器，继承于OncePerRequestFilter，也就是requestAttributes是在过滤器的时候就被设置到容器当中了</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/06/rBpUXl-45JuAK98EAATlpGumDSs148.png" height="50%" width="50%"></div><h2 id="4-初窥OncePerRequestFilter"><a href="#4-初窥OncePerRequestFilter" class="headerlink" title="4.初窥OncePerRequestFilter"></a>4.初窥OncePerRequestFilter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OncePerRequestFilter是为了保证一次请求只经过一次过滤链，只是为了适配不同的Web容器而去实现的</span></span><br><span class="line"><span class="comment"> * 加上一些异步线程调度的原因判断，由于源码过于复杂，目前还没彻底看懂，这里先贴上比较容易理解的</span></span><br><span class="line"><span class="comment"> * doFilter，如果你有更好的参考资料推荐，请尽管联系我</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OncePerRequestFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Suffix that gets appended to the filter name for the</span></span><br><span class="line"><span class="comment">    * "already filtered" request attribute.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getAlreadyFilteredAttributeName</span></span><br><span class="line"><span class="comment">    * ALREADY_FILTERED_SUFFIX是用来标识filter是否执行过的，</span></span><br><span class="line"><span class="comment">    * 通过filter+ALREADY_FILTERED_SUFFIX进行标识</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALREADY_FILTERED_SUFFIX = <span class="string">".FILTERED"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * This &#123;<span class="doctag">@code</span> doFilter&#125; implementation stores a request attribute for</span></span><br><span class="line"><span class="comment">    * "already filtered", proceeding without filtering again if the</span></span><br><span class="line"><span class="comment">    * attribute is already there.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #getAlreadyFilteredAttributeName</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #shouldNotFilter</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #doFilterInternal</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!(request <span class="keyword">instanceof</span> HttpServletRequest) || !(response <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"OncePerRequestFilter just supports HTTP requests"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      HttpServletRequest httpRequest = (HttpServletRequest) request;</span><br><span class="line">      HttpServletResponse httpResponse = (HttpServletResponse) response;</span><br><span class="line">  <span class="comment">// 这里获取一个名称，该名称后面会被用于放到request当作key</span></span><br><span class="line">      String alreadyFilteredAttributeName = getAlreadyFilteredAttributeName();</span><br><span class="line">      <span class="comment">// 检测当前请求是否已经拥有了该标记，如果拥有该标记则代表该过滤器执行过了</span></span><br><span class="line">      <span class="keyword">boolean</span> hasAlreadyFilteredAttribute = request.getAttribute(alreadyFilteredAttributeName) != <span class="keyword">null</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (hasAlreadyFilteredAttribute || skipDispatch(httpRequest) || shouldNotFilter(httpRequest)) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Proceed without invoking this filter...</span></span><br><span class="line">         <span class="comment">// 如果当前请求已经有了标识，调用责任链下的过滤器</span></span><br><span class="line">         filterChain.doFilter(request, response);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// Do invoke this filter...</span></span><br><span class="line">         <span class="comment">// 在当前请求里面设置一个标记，key就是前面拼接的那个变量，</span></span><br><span class="line">         <span class="comment">// value是true，这个标记如果在request存在则在前面会被检测</span></span><br><span class="line">         <span class="comment">// 到并改变hasAlreadyFilteredAttribute的值</span></span><br><span class="line">         request.setAttribute(alreadyFilteredAttributeName, Boolean.TRUE);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这个方法是一个抽象方法需要子类去实现具体的过滤逻辑</span></span><br><span class="line">            doFilterInternal(httpRequest, httpResponse, filterChain);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// Remove the "already filtered" request attribute for this request.</span></span><br><span class="line">            <span class="comment">// 执行完毕之后移除该标记</span></span><br><span class="line">            request.removeAttribute(alreadyFilteredAttributeName);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;RequestContextHolder持有上下文的Request容器详解&quot;&gt;&lt;a href=&quot;#RequestContextHolder持有上下文的Request容器详解&quot; class=&quot;headerlink&quot; title=&quot;RequestContextHolder持有上下文的Request容器详解&quot;&gt;&lt;/a&gt;RequestContextHolder持有上下文的Request容器详解&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h2&gt;&lt;p&gt;最近开发的时候，看到一些代码是从controller传递到service的，觉得这种解决方案不优雅，于是各种翻资料，终于翻到一个可以不从controller传递至service的。&lt;/p&gt;
&lt;p&gt;SpringMVC当中已经提供了Request容器的持有者类，我们无论是在service甚至是在dao层，都可以获取到当前请求的request，那么我们先来了解一下这个的用法，然后再来看源码吧！&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>MyBatis分页</title>
    <link href="https://www.waibizi.com/2021/01/16/MyBatis%E5%88%86%E9%A1%B5/"/>
    <id>https://www.waibizi.com/2021/01/16/MyBatis%E5%88%86%E9%A1%B5/</id>
    <published>2021-01-16T13:35:09.779Z</published>
    <updated>2021-01-16T13:55:47.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis分页"><a href="#MyBatis分页" class="headerlink" title="MyBatis分页"></a>MyBatis分页</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在开发自己的博客系统，前端采用vue+nuxt，后端采用SpringBoot+MyBatis作为整体架构，所以用到一些实战的技巧就打算顺便写写文章。</p><h2 id="1-分页介绍"><a href="#1-分页介绍" class="headerlink" title="1.分页介绍"></a>1.分页介绍</h2><p><font color=" #FF8C00">分页</font>是日常开发当中经常会遇到的问题，无论你是浏览百度又或者是谷歌都会有下一页的操作，那么，我们现在项目用的是MyBatis，就简单介绍一下怎么使用MyBatis开发的时候，怎么进行分页操作。</p><p>在使用MyBatis开发当中，通常会用三种分页方式<font color="#FF33FF">（1）一种是采用原始的SQL进行分页的（2）一种是采用interceptor来进行SQL的拼接，达到分页的效果（3）最后一种是使用PageHelper插件来进行分页。</font></p><p>贴心的我，为你们准备了测试的SQL了，数据你们就自己插入了哈</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`article`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`article`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'表唯一id'</span>,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'标题'</span>,</span><br><span class="line">  <span class="string">`content`</span> <span class="built_in">text</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">COMMENT</span> <span class="string">'内容'</span>,</span><br><span class="line">  <span class="string">`like`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'点赞'</span>,</span><br><span class="line">  <span class="string">`category_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'分类id'</span>,</span><br><span class="line">  <span class="string">`time`</span> datetime(<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'时间'</span>,</span><br><span class="line">  <span class="string">`image`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'封面图片地址'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8 <span class="keyword">COLLATE</span> = utf8_general_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure> <a id="more"></a><h2 id="2-LIMIT分页"><a href="#2-LIMIT分页" class="headerlink" title="2.LIMIT分页"></a>2.LIMIT分页</h2><p>LIMIT分页是从SQL语句的原始角度分页查询的，也就是采用SQL语句的LIMIT语法，是一种物理分页的形式。</p><p>假设我们当前需要查询的是第一页的数据，而且每页的数据量是5，使用如下的SQL语句可以了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> article <span class="keyword">LIMIT</span> <span class="number">0</span>, <span class="number">5</span></span><br></pre></td></tr></table></figure><p>查询第二页的数据我们就是采用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> article <span class="keyword">LIMIT</span> <span class="number">5</span>, <span class="number">5</span></span><br></pre></td></tr></table></figure><p>OK，看着这里，我就顺便重新带你回忆一下LIMIT的语法，LIMIT 后面带着两个数，表示的意思就是从第几行开始查询，然后查询多少条数据。</p><p>看到这里，你也明白了分页查询就是需要这两个参数</p><p>那么先介绍一下分页当中的两个重要概念：<font color=" #FF8C00">pageSize，pageNum</font>。</p><p><font color="#FF33FF">pageSize</font>：表示的是一页查询多少条数据。</p><p><font color="#FF33FF">pageNum</font>：表示的是当前在第几页。</p><p>那么pageSize与pageNum怎么运用到SQL分页当中呢，我们先来假设一个场景，我们现在访问的是第一页，每页数据是五个，也就是pageNum是1，pageSize是5，对应的SQL语句就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span>  article <span class="keyword">LIMIT</span> (pageNum<span class="number">-1</span>)*pageSize,pageSize</span><br></pre></td></tr></table></figure><p>但是咧，<font color="#00FA9A">SQL并不支持计算</font>，所以我们需要在传入的时候提前计算，而且有边缘值需要细抠一下，就是当pageNum等于0的时候。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageNum&gt;<span class="number">0</span>? pageNum-<span class="number">1</span>:<span class="number">0</span></span><br></pre></td></tr></table></figure><p>首先看下返回的数据：</p><div align="center"><img src="https://www.waibizi.com/group1/M00/00/05/rBpUXl8djm2AKHmOAACYdCdqBx4043.png"></div><p>OK！！！我们知道了返回的数据格式是这个样子，所以我们需要构建一下我们需要返回的data的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pager</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页当中每一页的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询出来的数据集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; rows;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据的总条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SummaryMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Summary&gt; <span class="title">summaryPage</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.waibizi.blog.project.mapper.SummaryMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"summaryPage"</span> <span class="attr">resultType</span>=<span class="string">"com.waibizi.blog.project.model.pojo.Summary"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">       SELECT * FROM summary  WHERE category_id = #&#123;categoryId&#125; LIMIT #&#123;pageNum&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">resultType</span>=<span class="string">"long"</span>&gt;</span></span><br><span class="line">        SELECT COUNT(1) FROM summary</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再来一个Service的实现层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SummaryServiceImpl</span> <span class="keyword">implements</span> <span class="title">SummaryService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SummaryMapper summaryMapper;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 当前页数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 页面数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId 分类的ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pager&lt;Summary&gt; <span class="title">summaryPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> categoryId)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"pageNum"</span>,(pageNum-<span class="number">1</span>&gt;<span class="number">0</span>?<span class="number">0</span>:pageNum)*pageSize);</span><br><span class="line">        params.put(<span class="string">"pageSize"</span>,pageSize);</span><br><span class="line">        params.put(<span class="string">"categoryId"</span>,categoryId);</span><br><span class="line">        Pager&lt;Summary&gt; page = <span class="keyword">new</span> Pager&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> count = summaryMapper.count();</span><br><span class="line">        List&lt;Summary&gt; list = summaryMapper.summaryPage(params);</span><br><span class="line">        page.setRows(list);</span><br><span class="line">        page.setTotal(count);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们简单在Contrller层进行调用就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/article/summary/list/&#123;categoryId&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> BlogResult <span class="title">GetSummaryList</span><span class="params">( @RequestParam <span class="keyword">int</span> pageNum,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  @RequestParam <span class="keyword">int</span> pageSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  @PathVariable <span class="keyword">int</span> categoryId)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BlogResult.success(<span class="string">"查询成功"</span>,summaryService.summaryPage(pageNum,pageSize,categoryId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BlogResult是我封装的统一返回结果集，这个不用理会</p><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Summary</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 摘要的唯一id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 摘要的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分类的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> categoryId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对应文章的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> articleId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Interceptor实现分页查询"><a href="#3-Interceptor实现分页查询" class="headerlink" title="3.Interceptor实现分页查询"></a>3.Interceptor实现分页查询</h2><h3 id="3-1-Interceptor介绍"><a href="#3-1-Interceptor介绍" class="headerlink" title="3.1  Interceptor介绍"></a>3.1  Interceptor介绍</h3><p>Interceptor是MyBatis的拦截器，MyBatis设计拦截器的初衷就是为了提供用户在某些时候可以在拦截器当中去实现一些自己业务操作。既然我们说Interceptor是拦截器，那么这个拦截器是拦截什么呢？结合MyBatis的功能，我们其实不难猜测，这个拦截就是拦截SQL相关的，拦截SQL之后，我们可以在不入侵原有的业务代码的逻辑上做一些相关的操作，例如分页操作，数据权限过滤操作，SQL执行时间性能的监控等等等。那么对于拦截这个SQL，必定涉及到SQL执行的相关对象，因为这个拦截器的本质就是拦截了这四大组件的操作，我们简单了解一下关于MyBatis的四大组件。</p><h4 id="3-1-1-MyBatis四大对象介绍"><a href="#3-1-1-MyBatis四大对象介绍" class="headerlink" title="3.1.1 MyBatis四大对象介绍"></a>3.1.1 MyBatis四大对象介绍</h4><p>四大对象分别是<font color=" #FF8C00"><strong>Executor、StatementHandler、PameterHandler和ResultSetHandler</strong></font></p><p>别慌哦，四大对象其实很简单的，我们就是简单了解一下他们对应的职责：</p><p><font color="#FF33FF"><strong>Executor</strong></font>：所有的SQL执行的都是靠这个到数据库当中去执行的，就是SQL的执行器</p><p><font color="#FF33FF"><strong>StatementHandler</strong></font>：学习过JDBC，都知道有一个Statement对象，这个就是MyBatis管理创建Statement对象的</p><p><font color="#FF33FF"><strong>ParameterHandler</strong></font>：就是处理SQL的参数的，就是SQL语句的参数处理器</p><p><font color="#FF33FF"><strong>ResultSetHandler</strong></font>：处理执行完SQL之后，响应的ResultSet</p><h3 id="3-2-Interceptor实现数据操作分页"><a href="#3-2-Interceptor实现数据操作分页" class="headerlink" title="3.2 Interceptor实现数据操作分页"></a>3.2 Interceptor实现数据操作分页</h3><p>使用Interceptor进行分页的步骤就是实现Interceptor接口，然后加上<font color=" #FF8C00">@Intercepts注解</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type=<span class="keyword">null</span>,method=<span class="string">""</span>,args=&#123;<span class="keyword">null</span>&#125;)&#125;)</span><br></pre></td></tr></table></figure><p>PS：其中type是要拦截的类，method是拦截的方法，因为存在重载机制，所以要加上参数列表，args。</p><p>OK！！！了解了这些之后，我们就可以来实现我们的分页，首先我们进行分页，还是与LIMIT分页的原理是一致的，我们需要在某一些SQL的语句当中加上LIMIT语句，而且必须在交给Statement预编译之前就拼接了，所以我们应该拦截的StatementHandler这个对象，然后拦截其中的prepare方法。</p><p>所以我们有了如下的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type=StatementHandler<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"prepare"</span>,</span><br><span class="line">                        args=&#123;Connection<span class="class">.<span class="keyword">class</span>,<span class="title">Integer</span>.<span class="title">class</span>&#125;)&#125;)</span></span><br></pre></td></tr></table></figure><p>接下来就是实现Interceptor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type= StatementHandler<span class="class">.<span class="keyword">class</span>,<span class="title">method</span></span>=<span class="string">"prepare"</span>,args=&#123;Connection<span class="class">.<span class="keyword">class</span>,<span class="title">Integer</span>.<span class="title">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">BlogPageInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageNum;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">    <span class="keyword">private</span> String dbType;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">/* 获取拦截的对象 */</span></span><br><span class="line">        StatementHandler statementHandler = (StatementHandler) invocation.getTarget();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">          通过Mybatis的一个反射对象得到StatementHandler的属性信息，因为StatementHandler当中的属性都是受保护的</span></span><br><span class="line"><span class="comment">          所以我们需要通过MetaObject对StatementHandler进行反射获取到相关的属性信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        MetaObject metaObject = SystemMetaObject.forObject(statementHandler);</span><br><span class="line">        <span class="comment">/* SQL语句其实都是保存在MappedStatement当中，我们需要通过StatementHandler去获取到这个SQL语句 */</span></span><br><span class="line">        MappedStatement mappedStatement = (MappedStatement)metaObject.getValue(<span class="string">"delegate.mappedStatement"</span>);</span><br><span class="line">        <span class="comment">/* 获取SQL语句的ID */</span></span><br><span class="line">        String id = mappedStatement.getId();</span><br><span class="line">        <span class="comment">/* 获取匹配到需要分页的ID */</span></span><br><span class="line">        <span class="keyword">if</span> (id.matches(<span class="string">".+Page$"</span>))&#123;</span><br><span class="line">            <span class="comment">/* 获取到参数处理器 */</span></span><br><span class="line">            ParameterHandler parameterHandler = (ParameterHandler)metaObject.getValue(<span class="string">"delegate.parameterHandler"</span>);</span><br><span class="line">            <span class="comment">/* 因为我们传入是传入Map，所以此处应该重新转为Map */</span></span><br><span class="line">            Map&lt;String, Object&gt; params = (Map&lt;String, Object&gt;)parameterHandler.getParameterObject();</span><br><span class="line">            pageNum = (<span class="keyword">int</span>)params.get(<span class="string">"pageNum"</span>);</span><br><span class="line">            pageSize = (<span class="keyword">int</span>)params.get(<span class="string">"pageSize"</span>);</span><br><span class="line">            <span class="comment">/* 获取到执行的SQL，然后拼接上这部分的信息 */</span></span><br><span class="line">            String sql = (String) metaObject.getValue(<span class="string">"delegate.boundSql.sql"</span>);</span><br><span class="line">            sql += <span class="string">" limit "</span>+(pageNum-<span class="number">1</span>)*pageSize +<span class="string">","</span>+pageSize;</span><br><span class="line">            metaObject.setValue(<span class="string">"delegate.boundSql.sql"</span>, sql);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 拦截执行完毕，将语句重新交回MyBatis继续执行 */</span></span><br><span class="line">        <span class="keyword">return</span> invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(target, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        String limit = properties.getProperty(<span class="string">"limit"</span>,<span class="string">"10"</span>);</span><br><span class="line">        <span class="keyword">this</span>.pageNum = Integer.parseInt(limit);</span><br><span class="line">        <span class="keyword">this</span>.dbType = properties.getProperty(<span class="string">"dbType"</span>, <span class="string">"mysql"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于暂时未找到适合SpringBoot配置MyBatis的插件最好加入方法，优雅地加入配置不会自动执行一下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span></span><br></pre></td></tr></table></figure><p>让这个拦截器生效只需要再加入就可以了，但是不会自动调用上述我说的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisInterceptorConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">ConfigurationCustomizer <span class="title">mybatisConfigurationCustomizer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(org.apache.ibatis.session.Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.addInterceptor(<span class="keyword">new</span> PageInterceptor());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-采用PageHelper进行分页"><a href="#4-采用PageHelper进行分页" class="headerlink" title="4.采用PageHelper进行分页"></a>4.采用PageHelper进行分页</h2><p>PageHelper是最简单的吧，你看看上述我写的Interceptor，写起来多麻烦呀，我们看上面那个demo就知道了，PageHelper就是帮你封装了这些复杂的过程，你不用去自己写这个拦截器，只需要导入PageHelper然后就可以实现不侵入原有业务代码的情况下进行分页了</p><p>首先需要引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先针对PageHelper又有一个新的概念来了，就是逻辑分页与物理分页，其实也不是PageHelper有的，MyBatis自己也有这两个概念。</p><p><font color=" #FF8C00">逻辑分页</font>：逻辑分页就是一次性查询很多数据，然后再在结果中检索分页的数据。这样做弊端是需要消耗大量的内存、有内存溢出的风险、对数据库压力较大。</p><p><font color=" #FF8C00">物理分页</font>：物理分页就是从数据库查询指定条数的数据，弥补了一次性全部查出的所有数据的种种缺点，比如需要大量的内存，对数据库查询压力较大等问题，我们先前一直使用的就是物理分页</p><p>为什么会有逻辑分页的存在，肯定有人跟我一样是个好奇的家伙</p><p>其实对于数据库来说，LIMIT并不是一个<font color=" #FF8C00">标准的SQL</font>，如果说我们换数据库了，有些数据库并没有LIMIT操作，也就是大家同样是SQL，但是对于其他的数据库有可能是不存在LIMIT的，所以我们就需要逻辑分页了。</p><p>MyBatis的<font color=" #FF8C00">RowBounds</font>，RowBounds是<font color=" #FF8C00">逻辑分页</font>，但是RowBounds只是表面看起来像是在查询所有的数据，然后再检索出来我们需要的，但是实际上内部并不是一次性查询所有的数据，因为MyBatis是对于JDBC的封装，在JDBC驱动当中有一个Fetch Size，这个Fetch Size规定了每次最多从数据库查询多少条数据，然后每次在执行next()操作的时候，才会去数据库当中拿更多的数据。</p><center>RowBounds有两个重要的属性，就是offset跟limit</center><p><font color=" #FF8C00">offset</font>：代表的是查询的其实行</p><p><font color=" #FF8C00">limit</font>：代表的是当前页显示多少条数据</p><p>我们就简单演示一个RowBounds的使用，因为LIMIT那种操作其实就跟上面一样的</p><p>我们把Service改成这个样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pager&lt;Summary&gt; <span class="title">summaryPage</span><span class="params">(<span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize, <span class="keyword">int</span> categoryId)</span> </span>&#123;</span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">"categoryId"</span>,categoryId);</span><br><span class="line">    Pager&lt;Summary&gt; page = <span class="keyword">new</span> Pager&lt;&gt;();</span><br><span class="line">    <span class="keyword">long</span> count = summaryMapper.count();</span><br><span class="line">    List&lt;Summary&gt; list = summaryMapper.summaryPage(params,<span class="keyword">new</span> RowBounds(pageNum,pageSize));</span><br><span class="line">    page.setRows(list);</span><br><span class="line">    page.setTotal(count);</span><br><span class="line">    <span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后Mapper改成这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SummaryMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;Summary&gt; <span class="title">summaryPage</span><span class="params">(Map&lt;String, Object&gt; params, RowBounds rowBounds)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.waibizi.blog.project.mapper.SummaryMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"summaryPage"</span> <span class="attr">resultType</span>=<span class="string">"com.waibizi.blog.project.model.pojo.Summary"</span> <span class="attr">parameterType</span>=<span class="string">"java.util.Map"</span>&gt;</span></span><br><span class="line">       SELECT * FROM summary  WHERE category_id = #&#123;categoryId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">resultType</span>=<span class="string">"long"</span>&gt;</span></span><br><span class="line">        SELECT COUNT(1) FROM summary</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yaml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="comment"># 默认值为 false，该参数对使用RowBounds作为分页参数时有效。</span></span><br><span class="line">  <span class="attr">offset-as-page-num:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># pagehelper的纠错机制，这时如果pageNum &lt;= 0会查询第一页，如果pageNum &gt; pages 会查询最后一页。</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="彩蛋时间：涉及面试以及答案"><a href="#彩蛋时间：涉及面试以及答案" class="headerlink" title="彩蛋时间：涉及面试以及答案"></a>彩蛋时间：涉及面试以及答案</h2><h3 id="MyBatis-逻辑分页和物理分页的区别是什么？"><a href="#MyBatis-逻辑分页和物理分页的区别是什么？" class="headerlink" title="MyBatis 逻辑分页和物理分页的区别是什么？"></a><strong>MyBatis 逻辑分页和物理分页的区别是什么？</strong></h3><ul><li>逻辑分页是一次性查询很多数据，然后再在结果中检索分页的数据。这样做弊端是需要消耗大量的内存、有内存溢出的风险、对数据库压力较大。</li><li>物理分页是从数据库查询指定条数的数据，弥补了一次性全部查出的所有数据的种种缺点，比如需要大量的内存，对数据库查询压力较大等问题。</li></ul><h3 id="RowBounds-是一次性查询全部结果吗？为什么？"><a href="#RowBounds-是一次性查询全部结果吗？为什么？" class="headerlink" title="RowBounds 是一次性查询全部结果吗？为什么？"></a><strong>RowBounds 是一次性查询全部结果吗？为什么？</strong></h3><ul><li>RowBounds 表面是在“所有”数据中检索数据，其实并非是一次性查询出所有数据，因为 MyBatis 是对 jdbc 的封装，在 jdbc 驱动中有一个 Fetch Size 的配置，它规定了每次最多从数据库查询多少条数据，假如你要查询更多数据，它会在你执行 next()的时候，去查询更多的数据。就好比你去自动取款机取 10000 元，但取款机每次最多能取 2500 元，所以你要取 4 次才能把钱取完。只是对于 jdbc 来说，当你调用 next()的时候会自动帮你完成查询工作。这样做的好处可以有效的防止内存溢出。</li></ul><h3 id="MyBatis-有几种分页方式？"><a href="#MyBatis-有几种分页方式？" class="headerlink" title="MyBatis 有几种分页方式？"></a><strong>MyBatis 有几种分页方式？</strong></h3><p>分页方式：逻辑分页和物理分页。</p><p><strong>逻辑分页：</strong> 使用 MyBatis 自带的 RowBounds 进行分页，它是一次性查询很多数据，然后在数据中再进行检索。</p><p><strong>物理分页：</strong> 自己手写 SQL 分页或使用分页插件 PageHelper，去数据库查询指定条数的分页数据的形式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;MyBatis分页&quot;&gt;&lt;a href=&quot;#MyBatis分页&quot; class=&quot;headerlink&quot; title=&quot;MyBatis分页&quot;&gt;&lt;/a&gt;MyBatis分页&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在开发自己的博客系统，前端采用vue+nuxt，后端采用SpringBoot+MyBatis作为整体架构，所以用到一些实战的技巧就打算顺便写写文章。&lt;/p&gt;
&lt;h2 id=&quot;1-分页介绍&quot;&gt;&lt;a href=&quot;#1-分页介绍&quot; class=&quot;headerlink&quot; title=&quot;1.分页介绍&quot;&gt;&lt;/a&gt;1.分页介绍&lt;/h2&gt;&lt;p&gt;&lt;font color=&quot; #FF8C00&quot;&gt;分页&lt;/font&gt;是日常开发当中经常会遇到的问题，无论你是浏览百度又或者是谷歌都会有下一页的操作，那么，我们现在项目用的是MyBatis，就简单介绍一下怎么使用MyBatis开发的时候，怎么进行分页操作。&lt;/p&gt;
&lt;p&gt;在使用MyBatis开发当中，通常会用三种分页方式&lt;font color=&quot;#FF33FF&quot;&gt;（1）一种是采用原始的SQL进行分页的（2）一种是采用interceptor来进行SQL的拼接，达到分页的效果（3）最后一种是使用PageHelper插件来进行分页。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;贴心的我，为你们准备了测试的SQL了，数据你们就自己插入了哈&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;DROP&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`article`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`article`&lt;/span&gt;  (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;表唯一id&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`title`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; utf8 &lt;span class=&quot;keyword&quot;&gt;COLLATE&lt;/span&gt; utf8_general_ci &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;标题&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`content`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; utf8 &lt;span class=&quot;keyword&quot;&gt;COLLATE&lt;/span&gt; utf8_general_ci &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;内容&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`like`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;点赞&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`category_id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;分类id&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`time`&lt;/span&gt; datetime(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;时间&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`image`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; utf8 &lt;span class=&quot;keyword&quot;&gt;COLLATE&lt;/span&gt; utf8_general_ci &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;封面图片地址&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;USING&lt;/span&gt; BTREE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CHARACTER&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; = utf8 &lt;span class=&quot;keyword&quot;&gt;COLLATE&lt;/span&gt; = utf8_general_ci ROW_FORMAT = Dynamic;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
